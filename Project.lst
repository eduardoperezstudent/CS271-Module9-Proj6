Microsoft (R) Macro Assembler Version 14.29.30158.0	    03/14/25 16:18:26
*Temp List Reverser     (Proj6_pereze4.asm		     Page 1 - 1


				TITLE Temp List Reverser     (Proj6_pereze4.asm)

				; Author: Eduardo Perez
				; Last Modified: March 16, 2025
				; OSU email address: pereze4@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6               Due Date: March 16, 2025
				; Description: This program loads a text file. The file contains Temperature values, each separated by a delimiter.
				; Each Temperature values are extracted, converted to it's integer value format, and then stored in an array.
				; The values are then displayed in reverse order as they are stored.
				; Implementation note 1: LODSB is used in detecting delimiter positions and presence of Cr Lf. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 



				;=================================
				; Macros

				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:
				mGetString MACRO str_Message, buffer, bufferSize, fileByteSize
				    PUSH    EAX
				    PUSH    ECX
				    PUSH    EDX
				    ; Display prompt message
				    MOV EDX, OFFSET str_Message
				    CALL WriteString  
				    
				    ; Get user input
				    MOV EDX, OFFSET buffer
				    MOV ECX, bufferSize
				    CALL ReadString  

				    ; Store number of bytes read
				    MOV fileByteSize, EAX

				    POP     EDX
				    POP     ECX
				    POP     EAX
				ENDM

				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:

				mDisplayString MACRO str_Message
				    PUSH    EDX

				    MOV     EDX, OFFSET str_Message
				    CALL    WriteString

				    POP     EDX
				ENDM


				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:

				mDisplayChar MACRO charValue
				    PUSH EAX
				    
				    MOV AL, charValue
				    CALL WriteChar

				    POP EAX
				ENDM



				;=================================
				; Global Variables
 = 00000018			TEMPS_PER_DAY = 24
 = 0000002C			DELIMITER   EQU ','


 00000000			.data

 00000000 47 69 76 65 20	str_MsgPromptFileName           BYTE    "Give the name of file containing the Temperature Readings: ", 0
	   74 68 65 20 6E
	   61 6D 65 20 6F
	   66 20 66 69 6C
	   65 20 63 6F 6E
	   74 61 69 6E 69
	   6E 67 20 74 68
	   65 20 54 65 6D
	   70 65 72 61 74
	   75 72 65 20 52
	   65 61 64 69 6E
	   67 73 3A 20 00


 0000003C  00000064 [		str_NameOfFile                  BYTE    100 DUP(0)                  ; Memory buffer for file name
	    00
	   ]
 000000A0  000003E8 [		file_TempReadings               BYTE    1000 DUP(255)               ; Memory buffer for file containing the temperature readings
	    FF
	   ]
				                  
 00000488 00000063		int_BufferSizeFileName          DWORD   99
 0000048C 00000000		int_LenNameOfFile               DWORD   ?                           ; Stores the number of bytes read
 00000490 000003E7		int_BufferSizeTemperatureFile   DWORD   999

 00000494 54 68 65 20 6E	str_MsgNumberofRows             BYTE    "The number of rows: ", 0
	   75 6D 62 65 72
	   20 6F 66 20 72
	   6F 77 73 3A 20
	   00
 000004A9 54 68 65 20 6E	str_MsgNumberofColumns          BYTE    "The number of columns: ", 0
	   75 6D 62 65 72
	   20 6F 66 20 63
	   6F 6C 75 6D 6E
	   73 3A 20 00
 000004C1 54 68 65 20 70	str_MsgPrevDlmtrPos             BYTE    "The previous demimiter position: ", 0
	   72 65 76 69 6F
	   75 73 20 64 65
	   6D 69 6D 69 74
	   65 72 20 70 6F
	   73 69 74 69 6F
	   6E 3A 20 00
 000004E3 54 68 65 20 63	str_MsgCrntDlmtrPos             BYTE    "The current demimiter position: ", 0
	   75 72 72 65 6E
	   74 20 64 65 6D
	   69 6D 69 74 65
	   72 20 70 6F 73
	   69 74 69 6F 6E
	   3A 20 00
 00000504 54 68 65 20 4C	str_MsgLoadedFile               BYTE    "The Loaded file: ", 0
	   6F 61 64 65 64
	   20 66 69 6C 65
	   3A 20 00

				;arr_TempMatrix                  DWORD   300 DUP(1), 0FFFFFFFFh


 00000000			.code
 00000000			main PROC

				    ;=================================
				    ; Get File name
				    mGetString str_MsgPromptFileName, str_NameOfFile, int_BufferSizeFileName, int_LenNameOfFile
 00000000  50		     1	    PUSH    EAX
 00000001  51		     1	    PUSH    ECX
 00000002  52		     1	    PUSH    EDX
 00000003  BA 00000000 R     1	    MOV EDX, OFFSET str_MsgPromptFileName
 00000008  E8 00000000 E     1	    CALL WriteString  
 0000000D  BA 0000003C R     1	    MOV EDX, OFFSET str_NameOfFile
 00000012  8B 0D 00000488 R  1	    MOV ECX, int_BufferSizeFileName
 00000018  E8 00000000 E     1	    CALL ReadString  
 0000001D  A3 0000048C R     1	    MOV int_LenNameOfFile, EAX
 00000022  5A		     1	    POP     EDX
 00000023  59		     1	    POP     ECX
 00000024  58		     1	    POP     EAX



				    ;=================================
				    ; Open File
 00000025  BA 0000003C R	    MOV     EDX, OFFSET str_NameOfFile
 0000002A  E8 00000000 E	    CALL    OpenInputFile

 0000002F  8B 0D 00000490 R	    MOV     ECX, int_BufferSizeTemperatureFile
 00000035  BA 000000A0 R	    MOV     EDX, OFFSET file_TempReadings
 0000003A  E8 00000000 E	    CALL    ReadFromFile




				    ;=================================
 0000003F  68 000000A0 R	    PUSH    OFFSET file_TempReadings
 00000044  E8 00000007		    CALL    ParseTempsFromString


				    






					Invoke ExitProcess,0	; exit to operating system
 00000049  6A 00	   *	    push   +000000000h
 0000004B  E8 00000000 E   *	    call   ExitProcess
 00000050			main ENDP



				; ==========================================================================================================================
				; Extracts temperature readings, in string delimited format, from memory. Then saves the readings in an arrary as integers
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 00000050			ParseTempsFromString PROC
				    LOCAL   arr_TempMatrix[200]:DWORD, str_CurntTemp[5]:BYTE, int_Len_Str_CrntTemp:DWORD, int_Sign:DWORD, int_RowIndex:DWORD, int_ColIndex:DWORD, int_CrntTemp:DWORD, int_PrevDlmterPos:DWORD, int_CrntDlmterPos:DWORD, offset_File_TempReadings:DWORD, int_LenMatrix:DWORD, int_WidthMatrix:DWORD

 00000050  55		   *	    push   ebp
 00000051  8B EC	   *	    mov    ebp, esp
 00000053  81 C4 FFFFFCB0  *	    add    esp, 0FFFFFCB0h
 00000059  50			    PUSH	EAX
 0000005A  53			    PUSH	EBX
 0000005B  51			    PUSH	ECX
 0000005C  52			    PUSH	EDX
 0000005D  56			    PUSH	ESI
 0000005E  57			    PUSH	EDI


				    ; Stack Layout:
				    ; [EBP + 8] = OFFSET file_TempReadings
				    ; [EBP + 4] = return address
				    ; [EBP] = old ebp

				    ; move parameter to local variable
 0000005F  8B 45 08		    MOV     EAX, [EBP + 8]
 00000062  89 85 FFFFFCB8	    MOV     offset_File_TempReadings, EAX

				    ;MOV     EDX, offset_File_TempReadings
				    ;CALL    CrLf
				    ;CALL    WriteString



				    ; Initialize temp matrix
 00000068  8D 85 FFFFFCE0	    LEA     EAX, arr_TempMatrix
 0000006E  50			    PUSH    EAX
 0000006F  E8 00000000 E	    CALL    CrLf
 00000074  E8 00000000 E	    CALL    WriteDec
 00000079  B8 000000C8		    MOV     EAX, LENGTHOF arr_TempMatrix
 0000007E  E8 00000000 E	    CALL    CrLf
 00000083  E8 00000000 E	    CALL    WriteDec
 00000088  50			    PUSH    EAX
 00000089  E8 0000007A		    CALL    init_TempMatrix


				    ;==================================================================
				    ; Get File Size
 0000008E  8D 85 FFFFFCB0	    LEA     EAX, int_WidthMatrix
 00000094  50			    PUSH    EAX
 00000095  8D 85 FFFFFCB4	    LEA     EAX, int_LenMatrix
 0000009B  50			    PUSH    EAX
 0000009C  FF B5 FFFFFCB8	    PUSH    offset_File_TempReadings
 000000A2  E8 000001C7		    CALL    get_MatrixSize

 000000A7  E8 00000000 E	    CALL    CrLf
 000000AC  BA 00000494 R	    MOV     EDX, OFFSET str_MsgNumberofRows
 000000B1  E8 00000000 E	    CALL    WriteString
 000000B6  8B 85 FFFFFCB4	    MOV     EAX, int_LenMatrix
 000000BC  E8 00000000 E	    CALL    WriteDec

 000000C1  E8 00000000 E	    CALL    CrLf
 000000C6  BA 000004A9 R	    MOV     EDX, OFFSET str_MsgNumberofColumns
 000000CB  E8 00000000 E	    CALL    WriteString
 000000D0  8B 85 FFFFFCB0	    MOV     EAX, int_WidthMatrix
 000000D6  E8 00000000 E	    CALL    WriteDec

				    ;==================================================================
				    ; Get current delimiter position
				    
 000000DB  FF B5 FFFFFCB8	    PUSH    offset_File_TempReadings
 000000E1  8D 85 FFFFFCBC	    LEA     EAX, int_CrntDlmterPos
 000000E7  50			    PUSH    EAX
 000000E8  B8 FFFFFFFF		    MOV     EAX, -1
 000000ED  89 85 FFFFFCC0	    MOV     int_PrevDlmterPos, EAX
 000000F3  FF B5 FFFFFCC0	    PUSH    int_PrevDlmterPos
 000000F9  E8 000000B7		    CALL    get_NextDlmtrPos
				    ;!!!!! After current line is done, in the loop, need to add 2 to int_PrevDlmterPos to compensate for CrLf

				   
				   
				   ;==================================================================
				   ;CALL     extract_StrCrntTemp
				    

 000000FE  5F			    POP	    EDI
 000000FF  5E			    POP 	ESI
 00000100  5A			    POP	    EDX
 00000101  59			    POP	    ECX
 00000102  5B			    POP 	EBX
 00000103  58			    POP	    EAX
 00000104  C9		   *	    leave  
 00000105  C2 0004		    RET     4

 00000108			ParseTempsFromString ENDP
Proj6_pereze4.asm(237) : warning A6004:procedure argument or local not referenced : str_CurntTemp
Proj6_pereze4.asm(237) : warning A6004:procedure argument or local not referenced : int_Len_Str_CrntTemp
Proj6_pereze4.asm(237) : warning A6004:procedure argument or local not referenced : int_Sign
Proj6_pereze4.asm(237) : warning A6004:procedure argument or local not referenced : int_RowIndex
Proj6_pereze4.asm(237) : warning A6004:procedure argument or local not referenced : int_ColIndex
Proj6_pereze4.asm(237) : warning A6004:procedure argument or local not referenced : int_CrntTemp



				; ==========================================================================================================================
				; Init Temp Matrix
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================

 00000108			init_TempMatrix PROC
 00000108  55			    PUSH    EBP
 00000109  8B EC		    MOV     EBP, ESP



 0000010B  50			    PUSH    EAX
 0000010C  53			    PUSH    EBX
 0000010D  51			    PUSH    ECX
 0000010E  52			    PUSH    EDX
 0000010F  56			    PUSH    ESI
 00000110  57			    PUSH    EDI

				    ;-------------------------------------------------------------------
				    ; Parameters:
				    ;   [EBP+12] : OFFSET arr_TempMatrix
				    ;   [EBP+8] : length_Arr_TempMatrix


 00000111  8B 45 0C		    MOV     EAX, [EBP+12]
 00000114  E8 00000000 E	    CALL    CrLf
 00000119  E8 00000000 E	    CALL     WriteDec
 0000011E  8B 45 08		    MOV     EAX, [EBP + 8]
 00000121  E8 00000000 E	    CALL    CrLf
 00000126  E8 00000000 E	    CALL    WriteDec
 0000012B  E8 00000000 E	    CALL    CrLf


				    ;==================================================================
				    ; Initialize Temp Matrix with value 1
 00000130  8B 4D 08		    MOV ECX, [EBP + 8]                                  ; Loop counter - LENGHTOF Array
 00000133  8B 7D 0C		    MOV EDI, [EBP+12]                                   ; Load address of the array into EDI
 00000136  B8 00000001		    MOV EAX, 1                                          ; Value to initialize (1)

				    ; Loop to initialize Temp Matrix
 0000013B			    _InitLoop:
 0000013B  89 07		        MOV DWORD PTR [EDI], EAX                         ; Store 1 at current position
 0000013D  83 C7 04		        ADD EDI, 4                                       ; Move to the next DWORD (4 bytes)
 00000140  E2 F9		        LOOP _InitLoop                                   ; Decrement ECX, loop if not zero


 00000142  8B 4D 08		        MOV ECX, [EBP+8]                                ; Set loop counter
 00000145  8B 75 0C		        MOV ESI, [EBP+12]                               ; Load base address of array

				    ; Print array
 00000148			    _PrintLoop:
 00000148  8B 06		        MOV EAX, DWORD PTR [ESI]                        ; Load current array value
 0000014A  E8 00000000 E	        CALL WriteDec                                   ; Print number
 0000014F  B0 20		        MOV AL, ' '
 00000151  E8 00000000 E	        CALL WriteChar

 00000156  83 C6 04		        ADD ESI, 4                                      ; Move to next DWORD
 00000159  E2 ED		        LOOP _PrintLoop                                 ; Repeat until ECX = 0

				 
				    ;-------------------------------------------------------------------
				    ; Restore Registers and Return:
 0000015B  5F			    POP     EDI
 0000015C  5E			    POP     ESI
 0000015D  5A			    POP     EDX
 0000015E  59			    POP     ECX
 0000015F  5B			    POP     EBX
 00000160  58			    POP     EAX
 00000161  5D			    POP     EBP
 00000162  C2 0008		    RET     8
 00000165			init_TempMatrix ENDP


				; ==========================================================================================================================
				; Extracts temperature readings, in string delimited format, from memory. Then saves the readings in an arrary as integers
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 00000165			extract_StrCrntTemp PROC
				    ;-------------------------------------------------------------------
				    ; Local Variables:
				    ;   prev_DlmterPos      - stores the parameter int_Prev_DlmterPos (previous delimiter index)
				    ;   crnt_DlmterPos      - stores the parameter int_CrntDlmterPos (current delimiter index)
				    ;   file_TempReadings   - stores the parameter offset_File_TempReadings (file buffer base address)
				    ;   startPos            - computed starting index for extraction (prev_DlmterPos + 1)
				    ;   stringLength        - length of the substring to extract (crnt_DlmterPos - startPos)
				    LOCAL prev_DlmterPos:DWORD
				    LOCAL crnt_DlmterPos:DWORD
				    LOCAL file_TempReadingsLoc:DWORD
				    LOCAL startPos:DWORD
				    LOCAL stringLength:DWORD

 00000165  55		   *	    push   ebp
 00000166  8B EC	   *	    mov    ebp, esp
 00000168  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 0000016B  50			    PUSH    EAX
 0000016C  53			    PUSH    EBX
 0000016D  51			    PUSH    ECX
 0000016E  52			    PUSH    EDX
 0000016F  56			    PUSH    ESI
 00000170  57			    PUSH    EDI

				    ;-------------------------------------------------------------------
				    ; Parameters
				    ; Parameters (from caller):
				    ;   [EBP+8]  : int_Prev_DlmterPos         - previous delimiter index.
				    ;   [EBP+12] : int_CrntDlmterPos          - current delimiter index.
				    ;   [EBP+16] : offset_str_CurntTemp       - destination address for extracted string.
				    ;   [EBP+20] : offset_File_TempReadings   - file buffer address.


				    ; Load parameters to local variables
 00000171  8B 45 08		    MOV     EAX, [EBP+8]
 00000174  89 45 FC		    MOV     prev_DlmterPos, EAX          ; Save previous delimiter position.
 00000177  8B 45 0C		    MOV     EAX, [EBP+12]
 0000017A  89 45 F8		    MOV     crnt_DlmterPos, EAX          ; Save current delimiter position.
 0000017D  8B 45 14		    MOV     EAX, [EBP+20]
 00000180  89 45 F4		    MOV     file_TempReadingsLoc, EAX      ; Save file buffer base address.

				    ;-------------------------------------------------------------------
				    ; Compute the Starting Position for Extraction:
				    ; startPos = prev_DlmterPos + 1  (skip the delimiter)
 00000183  8B 45 FC		    MOV     EAX, prev_DlmterPos
 00000186  83 C0 01		    ADD     EAX, 1                     ; Advance one position past previous delimiter.
 00000189  89 45 F0		    MOV     startPos, EAX              ; Save computed starting index.

				    ;-------------------------------------------------------------------
				    ; Compute the Length of the Substring to Extract:
				    ; stringLength = crnt_DlmterPos - startPos
 0000018C  8B 45 F8		    MOV     EAX, crnt_DlmterPos
 0000018F  2B 45 F0		    SUB     EAX, startPos              ; Compute number of characters to copy.
 00000192  89 45 EC		    MOV     stringLength, EAX          ; Save the computed string length.

				    ;-------------------------------------------------------------------
				    ; Set Up Source and Destination Pointers for Copy:
				    ; Source pointer = file_TempReadingsLoc + startPos
 00000195  8B 45 F4		    MOV     EAX, file_TempReadingsLoc
 00000198  03 45 F0		    ADD     EAX, startPos              ; Compute effective source address.
 0000019B  8B F0		    MOV     ESI, EAX                   ; ESI now points to the substring in the file buffer.
				    ;
				    ; Destination pointer = offset_str_CurntTemp (passed as parameter at [EBP+16])
 0000019D  8B 45 10		    MOV     EAX, [EBP+16]
 000001A0  8B F8		    MOV     EDI, EAX                   ; EDI points to the destination buffer.

				    ;-------------------------------------------------------------------
				    ; Copy the Substring Using REP MOVSB:
				    ; Clear the Direction Flag (ensures auto-increment).
 000001A2  FC			    CLD
				    ; Set ECX = stringLength (number of bytes to copy)
 000001A3  8B 4D EC		    MOV     ECX, stringLength
				    ; Use REP MOVSB to copy ECX bytes from DS:ESI to ES:EDI.
 000001A6  F3/ A4		    REP     MOVSB

				    ;-------------------------------------------------------------------
				    ; Append the NULL Terminator:
				    ; Place a 0 (null terminator) at the end of the copied string.
 000001A8  B0 00		    MOV     AL, 0                     ; Prepare NULL in AL.
 000001AA  AA			    STOSB                             ; Store AL at destination and increment EDI.

				    ;-------------------------------------------------------------------
				    ; Restore Registers and Return:
 000001AB  5F			    POP     EDI
 000001AC  5E			    POP     ESI
 000001AD  5A			    POP     EDX
 000001AE  59			    POP     ECX
 000001AF  5B			    POP     EBX
 000001B0  58			    POP     EAX
 000001B1  C9		   *	    leave  
 000001B2  C2 0014		    RET     20                        ; Clean up 20 bytes (4 parameters) from the stack.
 000001B5			extract_StrCrntTemp ENDP



				; ==========================================================================================================================
				; Searches for the next delimiter in the file buffer
				; receives: Address of the buffered file, offset of the matrix Length and Width placeholder
				; returns:
				; preconditions: passed address offsets
				; postconditions: values saved in memory
				; registers changed: none
				; ==========================================================================================================================
 000001B5			get_NextDlmtrPos PROC
				    LOCAL crntDlmtrPos:DWORD
				    LOCAL prevDlmterPos:DWORD
				    LOCAL offset_File_TempReadingsLoc:DWORD

 000001B5  55		   *	    push   ebp
 000001B6  8B EC	   *	    mov    ebp, esp
 000001B8  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000001BB  50			    PUSH    EAX
 000001BC  53			    PUSH    EBX
 000001BD  51			    PUSH    ECX
 000001BE  52			    PUSH    EDX
 000001BF  56			    PUSH    ESI
 000001C0  57			    PUSH    EDI

				    ; Parameters:
				    ;   [EBP+8]  : int_PrevDlmterPos
				    ;              (DWORD) The index of the previous delimiter in the current row.
				    ;   [EBP+12] : offset_Int_CrntDlmtrPos
				    ;              (DWORD) The address in memory where the result (the current delimiter index) will be saved.
				    ;   [EBP+16] : offset_File_TempReadings
				    ;              (DWORD) The address of the file saved in memory buffer (Temperature readings).

				    ; Store passed parameters in local variables.
 000001C1  8B 45 08		    MOV     EAX, [EBP+8]  
 000001C4  89 45 F8		    MOV     prevDlmterPos, EAX                ; Save previous delimiter position.

 000001C7  BA 000004C1 R	    MOV     EDX, OFFSET str_MsgPrevDlmtrPos
 000001CC  E8 00000000 E	    CALL    CrLf
 000001D1  E8 00000000 E	    CALL    WriteString
 000001D6  8B 45 F8		    MOV     EAX, prevDlmterPos
 000001D9  E8 00000000 E	    CALL    WriteInt

 000001DE  8B 45 10		    MOV     EAX, [EBP+16]
 000001E1  89 45 F4		    MOV     offset_File_TempReadingsLoc, EAX  ; Save file buffer base address.

 000001E4  BA 00000504 R	    MOV     EDX, OFFSET str_MsgLoadedFile
 000001E9  E8 00000000 E	    CALL    CrLF
 000001EE  E8 00000000 E	    CALL    WriteString
 000001F3  8B 55 F4		    MOV     EDX, offset_File_TempReadingsLoc
 000001F6  E8 00000000 E	    CALL    CrLF
 000001FB  E8 00000000 E	    CALL    WriteString

				    ; Compute starting address for search:
				    ; Start searching at (prevDlmterPos + 1) relative to the file buffer.
 00000200  8B 45 F8		    MOV     EAX, prevDlmterPos
 00000203  83 C0 01		    ADD     EAX, 1                                      ; Next search index.
 00000206  8B 5D F4		    MOV     EBX, offset_File_TempReadingsLoc            ; Load base address.
 00000209  03 D8		    ADD     EBX, EAX                                    ; EBX now points to the search start position.
 0000020B  8B F3		    MOV     ESI, EBX                                    ; Set ESI to the starting search pointer.

				    ; Search for next delimiter value in the file
 0000020D			    _searchLoop2:
 0000020D  AC			        LODSB                                           ; Load byte at [ESI] into AL; ESI increments automatically.
 0000020E  3C 2C		        CMP     AL, DELIMITER                           ; Compare byte with the delimiter
 00000210  74 02		        JE      _found_Dlmtr
 00000212  EB F9		        JMP     _searchLoop2                            ; Continue scanning

				    ; Jump here once the next delimiter is found
 00000214			    _found_Dlmtr:
				        ; ESI now points one byte past the found delimiter.
 00000214  8B C6		        MOV     EAX, ESI
 00000216  48			        DEC     EAX                                     ; Adjust: EAX now points to the delimiter itself.
 00000217  89 45 FC		        MOV     crntDlmtrPos, EAX                       ; Store current delimiter absolute position.

				        ; Calculate the delimiter's index relative to the file buffer.
 0000021A  8B 4D F4		        MOV     ECX, offset_File_TempReadingsLoc        ; Base address.
 0000021D  29 4D FC		        SUB     crntDlmtrPos, ECX                       ; crntDlmtrPos now holds the index.


				        ; Check for CRLF between previous delimiter and current delimiter.
				        ; Scan from (prevDlmterPos + 1) up to the found delimiter index.
 00000220  8B 45 F8		        MOV     EAX, prevDlmterPos
 00000223  83 C0 01		        ADD     EAX, 1                                  ; Starting index for scan.
 00000226  8B 5D FC		        MOV     EBX, crntDlmtrPos                       ; EBX holds current delimiter index.
 00000229  8B F8		        MOV     EDI, EAX                                ; EDI is our scanning index.

 0000022B			    _adjustLoop:
 0000022B  3B FB		        CMP     EDI, EBX
 0000022D  7D 19		        JGE     _doneAdjust                             ; If scanning index >= current delimiter index, finish.
 0000022F  8A 44 3D F4		        MOV     AL, BYTE PTR [offset_File_TempReadingsLoc + EDI]
 00000233  3C 0D		        CMP     AL, 0Dh
 00000235  74 03		        JE      _checkLF
 00000237  47			        INC     EDI
 00000238  EB F1		        JMP     _adjustLoop

 0000023A			    _checkLF:
 0000023A  80 7C 3D F5 0A	        CMP     BYTE PTR [offset_File_TempReadingsLoc + EDI + 1], 0Ah
 0000023F  74 03		        JE      _foundCRLF
 00000241  47			        INC     EDI
 00000242  EB E7		        JMP     _adjustLoop

 00000244			    _foundCRLF:
 00000244  83 45 FC 02		        ADD     crntDlmtrPos, 2            ; Adjust current delimiter index by adding 2.


 00000248			    _doneAdjust:
				        ; Save the result in the memory location pointed to by offset_Int_CrntDlmtrPos.
 00000248  8B 45 FC		        MOV     EAX, crntDlmtrPos
 0000024B  8B 55 0C		        MOV     EDX, [EBP+12]
 0000024E  89 02		        MOV     [EDX], EAX

				        ; Debug printouts:
 00000250  BA 000004E3 R	        MOV     EDX, OFFSET str_MsgCrntDlmtrPos
 00000255  E8 00000000 E	        CALL    CrLf
 0000025A  E8 00000000 E	        CALL    WriteString
 0000025F  E8 00000000 E	        CALL    WriteDec


 00000264  5F			        POP     EDI
 00000265  5E			        POP     ESI
 00000266  5A			        POP     EDX
 00000267  59			        POP     ECX
 00000268  5B			        POP     EBX
 00000269  58			        POP     EAX
 0000026A  C9		   *	    leave  
 0000026B  C2 000C		        RET     12
 0000026E			get_NextDlmtrPos ENDP




				; ==========================================================================================================================
				; Gathers the Length and Width og the matrix
				; receives: Address of the buffered file, offset of the matrix Length and Width placeholder
				; returns:
				; preconditions: passed address offsets
				; postconditions: values saved in memory
				; registers changed: none
				; ==========================================================================================================================
 0000026E			get_MatrixSize PROC

				    LOCAL int_NumRows:DWORD
				    LOCAL int_NumCols:DWORD
				    LOCAL offset_File_TempReadings:DWORD
				    LOCAL rowHasData:BYTE

 0000026E  55		   *	    push   ebp
 0000026F  8B EC	   *	    mov    ebp, esp
 00000271  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 00000274  50			    PUSH    EAX
 00000275  53			    PUSH    EBX
 00000276  51			    PUSH    ECX
 00000277  52			    PUSH    EDX
 00000278  56			    PUSH    ESI
 00000279  57			    PUSH    EDI


				    ; Parameters
				    ; [EBP + 16] int_WidthMatrix
				    ; [EBP + 12] int_LenMatrix
				    ; [EBP + 8]  offset_File_TempReadings

				    ; Load file address into ESI
 0000027A  8B 45 08		    MOV     EAX, [EBP + 8]
 0000027D  89 45 F4		    MOV     offset_File_TempReadings, EAX
 00000280  8B 75 F4		    MOV     ESI, offset_File_TempReadings       ; Had to abandon use of local variable, use ESI instead to make use of LODSB

				    ; Initialize counters and flag
 00000283  C7 45 FC		    MOV     int_NumRows, 0
	   00000000
 0000028A  C7 45 F8		    MOV     int_NumCols, 0                      ; Column count is based on delimiters (+ 1 if non-empty)
	   00000000
 00000291  C6 45 F3 00		    MOV     rowHasData, 0

				    ; ----------------------------------------------------------------
				    ; Process the first row: count columns and check for non-empty line
 00000295			    _countCols:
 00000295  AC			        LODSB                                   ; Load next byte from [ESI] into AL and increment ESI
 00000296  8A D8		        MOV     BL, AL                          ; Save the character in BL

 00000298  80 FB 00		        CMP     BL, 0                           ; End-of-file?
 0000029B  74 49		        JE      _end_Get_MatrixSize

 0000029D  80 FB 0D		        CMP     BL, 0Dh                          ; Skip CR (Carriage Return)
 000002A0  74 F3		        JE      _countCols

 000002A2  80 FB 0A		        CMP     BL, 0Ah                     ; LF indicates end-of-line
 000002A5  74 10		        JE      _finishFirstRow

				        ; Non CR/LF character: mark the row as non-empty
 000002A7  C6 45 F3 01		        MOV     rowHasData, 1

 000002AB  80 FB 2C		        CMP     BL, DELIMITER                     ; Check for delimiter
 000002AE  75 03		        JNE     _continueCols
 000002B0  FF 45 F8		        INC     int_NumCols

				    ; Jump here if encountered delimiter
 000002B3			    _continueCols:
 000002B3  8A C3		        MOV     AL, BL
 000002B5  EB DE		        JMP     _countCols

				    ; At the end of the first row, count it if it contains data.
 000002B7			    _finishFirstRow:

 000002B7  80 7D F3 01		    CMP     rowHasData, 1
 000002BB  75 03		    JNE     _skipFirstRow
 000002BD  FF 45 FC		    INC     int_NumRows

				    ; Assume file has at least one row
 000002C0			    _skipFirstRow:
 000002C0  C6 45 F3 00		        MOV     rowHasData, 0               ; Reset flag for next row


				    ; Process subsequent rows
 000002C4			    _countRows:
 000002C4  AC			        LODSB                               ; Load next byte
 000002C5  3C 00		        CMP     AL, 0                       ; End-of-file?
 000002C7  74 1D		        JE      _end_Get_MatrixSize
 000002C9  3C 0D		        CMP     AL, 0Dh                     ; Skip CR (Carriage Return)
 000002CB  74 F7		        JE      _countRows
 000002CD  3C 0A		        CMP     AL, 0Ah                     ; LF indicates end-of-line
 000002CF  74 06		        JE      _endOfRow
				        ; Non CR/LF character: mark the row as non-empty
 000002D1  C6 45 F3 01		        MOV     rowHasData, 1
 000002D5  EB ED		        JMP     _countRows

				    ; At the end of a row, count it if it contains data.
 000002D7			    _endOfRow:
 000002D7  80 7D F3 01		    CMP     rowHasData, 1
 000002DB  75 03		    JNE     _resetRow
 000002DD  FF 45 FC		    INC     int_NumRows

				    ; Reset flag for the next row
 000002E0			    _resetRow:
 000002E0  C6 45 F3 00		        MOV     rowHasData, 0       
 000002E4  EB DE		        JMP     _countRows

				     
				    ; check if final row has data
 000002E6			    _end_Get_MatrixSize:
 000002E6  80 7D F3 01		    CMP     rowHasData, 1
 000002EA  74 02		    JE      _addFinalRow
 000002EC  EB 05		    JMP    _storeCounts 


				    ; Jump here if final Row has data to count it
 000002EE			    _addFinalRow:
 000002EE  FF 45 FC		        INC     int_NumRows
 000002F1  EB 00		        JMP     _storeCounts

				    ; Store the row and column counts in the provided output addresses.
 000002F3			    _storeCounts:

 000002F3  8B 45 FC		    MOV     EAX, int_NumRows
 000002F6  8B 7D 0C		    MOV     EDI, [EBP + 12]
 000002F9  89 07		    MOV     DWORD PTR [EDI], EAX

 000002FB  8B 45 F8		    MOV     EAX, int_NumCols
 000002FE  8B 7D 10		    MOV     EDI, [EBP + 16]
 00000301  89 07		    MOV     DWORD PTR [EDI], EAX

 00000303  5F			    POP     EDI
 00000304  5E			    POP     ESI
 00000305  5A			    POP     EDX
 00000306  59			    POP     ECX
 00000307  5B			    POP     EBX
 00000308  58			    POP     EAX
 00000309  C9		   *	    leave  
 0000030A  C2 000C		    RET     12



 0000030D			get_MatrixSize ENDP





				END main
Microsoft (R) Macro Assembler Version 14.29.30158.0	    03/14/25 16:18:26
*Temp List Reverser     (Proj6_pereze4.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayChar . . . . . . . . . .	Proc
mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000516 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000030D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseTempsFromString . . . . . .	P Near	 00000050 _TEXT	Length= 000000B8 Public STDCALL
  arr_TempMatrix . . . . . . . .	DWord	 bp - 00000320
  str_CurntTemp  . . . . . . . .	Byte	 bp - 00000325
  int_Len_Str_CrntTemp . . . . .	DWord	 bp - 0000032C
  int_Sign . . . . . . . . . . .	DWord	 bp - 00000330
  int_RowIndex . . . . . . . . .	DWord	 bp - 00000334
  int_ColIndex . . . . . . . . .	DWord	 bp - 00000338
  int_CrntTemp . . . . . . . . .	DWord	 bp - 0000033C
  int_PrevDlmterPos  . . . . . .	DWord	 bp - 00000340
  int_CrntDlmterPos  . . . . . .	DWord	 bp - 00000344
  offset_File_TempReadings . . .	DWord	 bp - 00000348
  int_LenMatrix  . . . . . . . .	DWord	 bp - 0000034C
  int_WidthMatrix  . . . . . . .	DWord	 bp - 00000350
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
extract_StrCrntTemp  . . . . . .	P Near	 00000165 _TEXT	Length= 00000050 Public STDCALL
  prev_DlmterPos . . . . . . . .	DWord	 bp - 00000004
  crnt_DlmterPos . . . . . . . .	DWord	 bp - 00000008
  file_TempReadingsLoc . . . . .	DWord	 bp - 0000000C
  startPos . . . . . . . . . . .	DWord	 bp - 00000010
  stringLength . . . . . . . . .	DWord	 bp - 00000014
get_MatrixSize . . . . . . . . .	P Near	 0000026E _TEXT	Length= 0000009F Public STDCALL
  int_NumRows  . . . . . . . . .	DWord	 bp - 00000004
  int_NumCols  . . . . . . . . .	DWord	 bp - 00000008
  offset_File_TempReadings . . .	DWord	 bp - 0000000C
  rowHasData . . . . . . . . . .	Byte	 bp - 0000000D
  _countCols . . . . . . . . . .	L Near	 00000295 _TEXT	
  _continueCols  . . . . . . . .	L Near	 000002B3 _TEXT	
  _finishFirstRow  . . . . . . .	L Near	 000002B7 _TEXT	
  _skipFirstRow  . . . . . . . .	L Near	 000002C0 _TEXT	
  _countRows . . . . . . . . . .	L Near	 000002C4 _TEXT	
  _endOfRow  . . . . . . . . . .	L Near	 000002D7 _TEXT	
  _resetRow  . . . . . . . . . .	L Near	 000002E0 _TEXT	
  _end_Get_MatrixSize  . . . . .	L Near	 000002E6 _TEXT	
  _addFinalRow . . . . . . . . .	L Near	 000002EE _TEXT	
  _storeCounts . . . . . . . . .	L Near	 000002F3 _TEXT	
get_NextDlmtrPos . . . . . . . .	P Near	 000001B5 _TEXT	Length= 000000B9 Public STDCALL
  crntDlmtrPos . . . . . . . . .	DWord	 bp - 00000004
  prevDlmterPos  . . . . . . . .	DWord	 bp - 00000008
  offset_File_TempReadingsLoc  .	DWord	 bp - 0000000C
  _searchLoop2 . . . . . . . . .	L Near	 0000020D _TEXT	
  _found_Dlmtr . . . . . . . . .	L Near	 00000214 _TEXT	
  _adjustLoop  . . . . . . . . .	L Near	 0000022B _TEXT	
  _checkLF . . . . . . . . . . .	L Near	 0000023A _TEXT	
  _foundCRLF . . . . . . . . . .	L Near	 00000244 _TEXT	
  _doneAdjust  . . . . . . . . .	L Near	 00000248 _TEXT	
init_TempMatrix  . . . . . . . .	P Near	 00000108 _TEXT	Length= 0000005D Public STDCALL
  _InitLoop  . . . . . . . . . .	L Near	 0000013B _TEXT	
  _PrintLoop . . . . . . . . . .	L Near	 00000148 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000050 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DELIMITER  . . . . . . . . . . .	Number	 0000002Ch   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEMPS_PER_DAY  . . . . . . . . .	Number	 00000018h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
file_TempReadings  . . . . . . .	Byte	 000000A0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
int_BufferSizeFileName . . . . .	DWord	 00000488 _DATA	
int_BufferSizeTemperatureFile  .	DWord	 00000490 _DATA	
int_LenNameOfFile  . . . . . . .	DWord	 0000048C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
str_MsgCrntDlmtrPos  . . . . . .	Byte	 000004E3 _DATA	
str_MsgLoadedFile  . . . . . . .	Byte	 00000504 _DATA	
str_MsgNumberofColumns . . . . .	Byte	 000004A9 _DATA	
str_MsgNumberofRows  . . . . . .	Byte	 00000494 _DATA	
str_MsgPrevDlmtrPos  . . . . . .	Byte	 000004C1 _DATA	
str_MsgPromptFileName  . . . . .	Byte	 00000000 _DATA	
str_NameOfFile . . . . . . . . .	Byte	 0000003C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   6 Warnings
	   0 Errors
