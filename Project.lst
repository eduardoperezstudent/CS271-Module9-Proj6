Microsoft (R) Macro Assembler Version 14.29.30158.0	    03/14/25 23:59:18
*Temp List Reverser     (Proj6_pereze4.asm		     Page 1 - 1


				TITLE Temp List Reverser     (Proj6_pereze4.asm)

				; Author: Eduardo Perez
				; Last Modified: March 16, 2025
				; OSU email address: pereze4@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6               Due Date: March 16, 2025
				; Description: This program loads a text file. The file contains Temperature values, each separated by a delimiter.
				; Each Temperature values are extracted ONE AT A TIME; converted to it's integer value format, and then stored in an array.
				; The values are then displayed in reverse order as they are stored.
				; Implementation note 1:    LODSB is used in detecting delimiter positions and presence of Cr Lf. 
				;                           MOVSB is utilized in extracting current Temp reading iteration from the file.
				;                           LODSB is utlized to convert a Temp reading from str to int format
				; Implementation note 2:    Can accept Temp readings with prefix '+' or '-', and/or a leading zero

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				;=================================
				; Macros

				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:
				mGetString MACRO str_Message, buffer, bufferSize, fileByteSize
				    PUSH    EAX
				    PUSH    ECX
				    PUSH    EDX
				    ; Display prompt message
				    MOV EDX, OFFSET str_Message
				    CALL WriteString  
				    
				    ; Get user input
				    MOV EDX, OFFSET buffer
				    MOV ECX, bufferSize
				    CALL ReadString  

				    ; Store number of bytes read
				    MOV fileByteSize, EAX

				    POP     EDX
				    POP     ECX
				    POP     EAX
				ENDM

				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:

				mDisplayString MACRO str_Message
				    PUSH    EDX

				    MOV     EDX, OFFSET str_Message
				    CALL    WriteString

				    POP     EDX
				ENDM


				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:

				mDisplayChar MACRO charValue
				    PUSH EAX
				    
				    MOV AL, charValue
				    CALL WriteChar

				    POP EAX
				ENDM



				;=================================
				; Global Variables
 = 00000018			TEMPS_PER_DAY = 24
 = 0000002C			DELIMITER   EQU ','


 00000000			.data

 00000000 47 69 76 65 20	str_MsgPromptFileName           BYTE    "Give the name of file containing the Temperature Readings: ", 0
	   74 68 65 20 6E
	   61 6D 65 20 6F
	   66 20 66 69 6C
	   65 20 63 6F 6E
	   74 61 69 6E 69
	   6E 67 20 74 68
	   65 20 54 65 6D
	   70 65 72 61 74
	   75 72 65 20 52
	   65 61 64 69 6E
	   67 73 3A 20 00


 0000003C  00000064 [		str_NameOfFile                  BYTE    100 DUP(0)                  ; Memory buffer for file name
	    00
	   ]
 000000A0  000003E8 [		file_TempReadings               BYTE    1000 DUP(255)               ; Memory buffer for file containing the temperature readings
	    FF
	   ]
				                  
 00000488 00000063		int_BufferSizeFileName          DWORD   99
 0000048C 00000000		int_LenNameOfFile               DWORD   ?                           ; Stores the number of bytes read
 00000490 000003E7		int_BufferSizeTemperatureFile   DWORD   999

 00000494 54 68 65 20 6E	str_MsgNumberofRows             BYTE    "The number of rows: ", 0
	   75 6D 62 65 72
	   20 6F 66 20 72
	   6F 77 73 3A 20
	   00
 000004A9 54 68 65 20 6E	str_MsgNumberofColumns          BYTE    "The number of columns: ", 0
	   75 6D 62 65 72
	   20 6F 66 20 63
	   6F 6C 75 6D 6E
	   73 3A 20 00
 000004C1 54 68 65 20 70	str_MsgPrevDlmtrPos             BYTE    "The previous delimiter position: ", 0
	   72 65 76 69 6F
	   75 73 20 64 65
	   6C 69 6D 69 74
	   65 72 20 70 6F
	   73 69 74 69 6F
	   6E 3A 20 00
 000004E3 54 68 65 20 63	str_MsgCrntDlmtrPos             BYTE    "The current delimiter position: ", 0
	   75 72 72 65 6E
	   74 20 64 65 6C
	   69 6D 69 74 65
	   72 20 70 6F 73
	   69 74 69 6F 6E
	   3A 20 00
 00000504 54 68 65 20 4C	str_MsgLoadedFile               BYTE    "The Loaded file: ", 0
	   6F 61 64 65 64
	   20 66 69 6C 65
	   3A 20 00
 00000516 54 68 65 20 65	str_MsgCurrentTempIteration     BYTE    "The extracted current Temperature reading: ", 0
	   78 74 72 61 63
	   74 65 64 20 63
	   75 72 72 65 6E
	   74 20 54 65 6D
	   70 65 72 61 74
	   75 72 65 20 72
	   65 61 64 69 6E
	   67 3A 20 00
 00000542 54 68 65 20 73	str_MsgSign                     BYTE    "The sign bit of the extracted current Temperature reading: ", 0
	   69 67 6E 20 62
	   69 74 20 6F 66
	   20 74 68 65 20
	   65 78 74 72 61
	   63 74 65 64 20
	   63 75 72 72 65
	   6E 74 20 54 65
	   6D 70 65 72 61
	   74 75 72 65 20
	   72 65 61 64 69
	   6E 67 3A 20 00
 0000057E 54 68 65 20 65	str_MsgSignRemoved              BYTE    "The extracted current Temperature reading, sign removed if any: ", 0
	   78 74 72 61 63
	   74 65 64 20 63
	   75 72 72 65 6E
	   74 20 54 65 6D
	   70 65 72 61 74
	   75 72 65 20 72
	   65 61 64 69 6E
	   67 2C 20 73 69
	   67 6E 20 72 65
	   6D 6F 76 65 64
	   20 69 66 20 61
	   6E 79 3A 20 00
 000005BF 54 68 65 20 63	str_MsgConvertedInt             BYTE    "The converted integer value: ", 0
	   6F 6E 76 65 72
	   74 65 64 20 69
	   6E 74 65 67 65
	   72 20 76 61 6C
	   75 65 3A 20 00
 000005DD 54 68 65 20 69	str_MsgAfterSignCheck           BYTE    "The integer value after the sign check: ", 0
	   6E 74 65 67 65
	   72 20 76 61 6C
	   75 65 20 61 66
	   74 65 72 20 74
	   68 65 20 73 69
	   67 6E 20 63 68
	   65 63 6B 3A 20
	   00


				;arr_TempMatrix                  DWORD   300 DUP(1), 0FFFFFFFFh


				; For debugging PROC GetSign
 00000606 50 4F 49 4E 54	STR_MSGPOINTER         BYTE "POINTER VALUE: ",0
	   45 52 20 56 41
	   4C 55 45 3A 20
	   00
 00000616 50 41 53 53 45	STR_MSGPASSEDSTRING    BYTE "PASSED STRING: ",0
	   44 20 53 54 52
	   49 4E 47 3A 20
	   00
 00000626 46 49 52 53 54	STR_MSGFIRSTCHAR       BYTE "FIRST CHAR: ",0
	   20 43 48 41 52
	   3A 20 00
 00000633 20 41 53 43 49	STR_MSGASCII           BYTE " ASCII: ",0
	   49 3A 20 00
 0000063C 53 48 49 46 54	STR_MSGSHIFTING        BYTE "SHIFTING STRING...",0
	   49 4E 47 20 53
	   54 52 49 4E 47
	   2E 2E 2E 00
 0000064F 53 48 49 46 54	STR_MSGSHIFTEDSTRING   BYTE "SHIFTED STRING: ",0
	   45 44 20 53 54
	   52 49 4E 47 3A
	   20 00
 00000660 49 4E 54 20 53	STR_MSGINTSIGN         BYTE "INT SIGN: ",0
	   49 47 4E 3A 20
	   00

				; For debugging PROC ConvertStrToInteger
 0000066B 4C 45 4E 47 54	STR_MSGLENGTH        BYTE "LENGTH: ",0
	   48 3A 20 00
 00000674 43 4F 4E 56 45	STR_MSGCONVERTING    BYTE "CONVERTING STRING:",0
	   52 54 49 4E 47
	   20 53 54 52 49
	   4E 47 3A 00
 00000687 43 4F 4E 56 45	STR_MSGCONVERTED     BYTE "CONVERTED INTEGER: ",0
	   52 54 45 44 20
	   49 4E 54 45 47
	   45 52 3A 20 00






 00000000			.code
 00000000			main PROC

				    ;=================================
				    ; Get File name
				    mGetString str_MsgPromptFileName, str_NameOfFile, int_BufferSizeFileName, int_LenNameOfFile
 00000000  50		     1	    PUSH    EAX
 00000001  51		     1	    PUSH    ECX
 00000002  52		     1	    PUSH    EDX
 00000003  BA 00000000 R     1	    MOV EDX, OFFSET str_MsgPromptFileName
 00000008  E8 00000000 E     1	    CALL WriteString  
 0000000D  BA 0000003C R     1	    MOV EDX, OFFSET str_NameOfFile
 00000012  8B 0D 00000488 R  1	    MOV ECX, int_BufferSizeFileName
 00000018  E8 00000000 E     1	    CALL ReadString  
 0000001D  A3 0000048C R     1	    MOV int_LenNameOfFile, EAX
 00000022  5A		     1	    POP     EDX
 00000023  59		     1	    POP     ECX
 00000024  58		     1	    POP     EAX



				    ;=================================
				    ; Open File
 00000025  BA 0000003C R	    MOV     EDX, OFFSET str_NameOfFile
 0000002A  E8 00000000 E	    CALL    OpenInputFile

 0000002F  8B 0D 00000490 R	    MOV     ECX, int_BufferSizeTemperatureFile
 00000035  BA 000000A0 R	    MOV     EDX, OFFSET file_TempReadings
 0000003A  E8 00000000 E	    CALL    ReadFromFile




				    ;=================================
 0000003F  68 000000A0 R	    PUSH    OFFSET file_TempReadings
 00000044  E8 00000007		    CALL    ParseTempsFromString


					Invoke ExitProcess,0	; exit to operating system
 00000049  6A 00	   *	    push   +000000000h
 0000004B  E8 00000000 E   *	    call   ExitProcess
 00000050			main ENDP



				; ==========================================================================================================================
				; Extracts temperature readings, in string delimited format, from memory. Then saves the readings in an arrary as integers
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 00000050			ParseTempsFromString PROC
				    LOCAL   arr_TempMatrix[200]:DWORD, str_CurntTemp[5]:BYTE, int_Len_Str_CrntTemp:DWORD, int_Sign:DWORD, int_RowIndex:DWORD, int_ColIndex:DWORD, int_CrntTemp:DWORD, int_PrevDlmterPos:DWORD, int_CrntDlmterPos:DWORD, offset_File_TempReadings:DWORD, int_LenMatrix:DWORD, int_WidthMatrix:DWORD

 00000050  55		   *	    push   ebp
 00000051  8B EC	   *	    mov    ebp, esp
 00000053  81 C4 FFFFFCB0  *	    add    esp, 0FFFFFCB0h
 00000059  50			    PUSH	EAX
 0000005A  53			    PUSH	EBX
 0000005B  51			    PUSH	ECX
 0000005C  52			    PUSH	EDX
 0000005D  56			    PUSH	ESI
 0000005E  57			    PUSH	EDI


				    ; Stack Layout:
				    ; [EBP + 8] = OFFSET file_TempReadings
				    ; [EBP + 4] = return address
				    ; [EBP] = old ebp

				    ; move parameter to local variable
 0000005F  8B 45 08		    MOV     EAX, [EBP + 8]
 00000062  89 85 FFFFFCB8	    MOV     offset_File_TempReadings, EAX

				    ;MOV     EDX, offset_File_TempReadings
				    ;CALL    CrLf
				    ;CALL    WriteString



				    ; Initialize temp matrix
 00000068  8D 85 FFFFFCE0	    LEA     EAX, arr_TempMatrix
 0000006E  50			    PUSH    EAX
 0000006F  B8 000000C8		    MOV     EAX, LENGTHOF arr_TempMatrix
 00000074  50			    PUSH    EAX
 00000075  E8 00000406		    CALL    Init_TempMatrix


				    ;==================================================================
				    ; Get File Size
 0000007A  8D 85 FFFFFCB0	    LEA     EAX, int_WidthMatrix
 00000080  50			    PUSH    EAX
 00000081  8D 85 FFFFFCB4	    LEA     EAX, int_LenMatrix
 00000087  50			    PUSH    EAX
 00000088  FF B5 FFFFFCB8	    PUSH    offset_File_TempReadings
 0000008E  E8 0000034E		    CALL    Get_MatrixSize

 00000093  E8 00000000 E	    CALL    CrLf
 00000098  BA 00000494 R	    MOV     EDX, OFFSET str_MsgNumberofRows
 0000009D  E8 00000000 E	    CALL    WriteString
 000000A2  8B 85 FFFFFCB4	    MOV     EAX, int_LenMatrix
 000000A8  E8 00000000 E	    CALL    WriteDec

 000000AD  E8 00000000 E	    CALL    CrLf
 000000B2  BA 000004A9 R	    MOV     EDX, OFFSET str_MsgNumberofColumns
 000000B7  E8 00000000 E	    CALL    WriteString
 000000BC  8B 85 FFFFFCB0	    MOV     EAX, int_WidthMatrix
 000000C2  E8 00000000 E	    CALL    WriteDec

				    ;==================================================================
				    ; Get current delimiter position
				    
 000000C7  FF B5 FFFFFCB8	    PUSH    offset_File_TempReadings
 000000CD  8D 85 FFFFFCBC	    LEA     EAX, int_CrntDlmterPos
 000000D3  50			    PUSH    EAX
 000000D4  B8 00000002		    MOV     EAX, 2
 000000D9  89 85 FFFFFCC0	    MOV     int_PrevDlmterPos, EAX
 000000DF  FF B5 FFFFFCC0	    PUSH    int_PrevDlmterPos
 000000E5  E8 00000285		    CALL    Get_NextDlmtrPos
				    ;!!!!! After current line is done, in the loop, need to add 2 to int_PrevDlmterPos to compensate for CrLf

				   
				   ;==================================================================
				   ; Get an iteration of Temp reading, save as string
 000000EA  8B 85 FFFFFCB8	   MOV      EAX, offset_File_TempReadings
 000000F0  50			   PUSH     EAX
 000000F1  8D 85 FFFFFCDB	   LEA      EAX, str_CurntTemp
 000000F7  50			   PUSH     EAX
 000000F8  8B 85 FFFFFCC0	   MOV      EAX, int_PrevDlmterPos
 000000FE  50			   PUSH     EAX
 000000FF  8B 85 FFFFFCBC	   MOV      EAX, int_CrntDlmterPos
 00000105  50			   PUSH     EAX
 00000106  E8 000001BF		   CALL     Extract_StrCrntTemp
 0000010B  BA 00000516 R	   MOV      EDX, OFFSET str_MsgCurrentTempIteration
 00000110  E8 00000000 E	   CALL     CrLf
 00000115  E8 00000000 E	   CALL     WriteString
 0000011A  8D 95 FFFFFCDB	   LEA      EDX, str_CurntTemp
 00000120  E8 00000000 E	   CALL     WriteString


				   ;==================================================================
				   ; Detect the sign, store this info then removes the sign from the string
 00000125  8D 85 FFFFFCD0	    LEA      EAX, int_Sign
 0000012B  50			    PUSH     EAX
 0000012C  8D 85 FFFFFCDB	    LEA      EAX, str_CurntTemp
 00000132  50			    PUSH     EAX
 00000133  E8 00000120		    CALL     GetSign
				    ; Debug Print
 00000138  E8 00000000 E	    CALL    CrLf
 0000013D  BA 00000542 R	    MOV     EDX, OFFSET str_MsgSign
 00000142  E8 00000000 E	    CALL    WriteString
 00000147  8B 85 FFFFFCD0	    MOV     EAX, int_Sign
 0000014D  E8 00000000 E	    CALL    WriteDec
 00000152  E8 00000000 E	    CALL    CrLf     
 00000157  BA 0000057E R	    MOV     EDX, OFFSET str_MsgSignRemoved
 0000015C  E8 00000000 E	    CALL    WriteString
 00000161  8D 95 FFFFFCDB	    LEA     EDX, str_CurntTemp
 00000167  E8 00000000 E	    CALL    WriteString
 0000016C  E8 00000000 E	    CALL    CrLf


				    
				   ;==================================================================
				   ; Convert current Temp Reading to Integer

 00000171  8D 85 FFFFFCC4	    LEA     EAX, int_CrntTemp
 00000177  50			    PUSH    EAX
 00000178  8D 85 FFFFFCDB	    LEA     EAX, str_CurntTemp
 0000017E  50			    PUSH    EAX
 0000017F  E8 00000078		    CALL    ConvertStringToInteger
				    ; Debugging printouts
 00000184  E8 00000000 E	    CALL    CrLf
 00000189  BA 000005BF R	    MOV     EDX, OFFSET str_MsgConvertedInt
 0000018E  E8 00000000 E	    CALL    WriteString
 00000193  8B 85 FFFFFCC4	    MOV     EAX, int_CrntTemp
 00000199  E8 00000000 E	    CALL    WriteInt


				   ;==================================================================
				   ; Check if reference sign bit is set. 
				   ; If yes, negate the  stored integer Temp reading
				    
 0000019E  8B 85 FFFFFCD0	    MOV     EAX, int_Sign
 000001A4  83 F8 01		    CMP     EAX, 1
 000001A7  75 0C		    JNE     _Save_ToTempMatrix
 000001A9  8D 85 FFFFFCC4	    LEA     EAX, int_CrntTemp
 000001AF  50			    PUSH    EAX
 000001B0  E8 00000024		    CALL    Negate_CurntTemp


 000001B5			    _Save_ToTempMatrix:
				    ; Debugging printouts
 000001B5  E8 00000000 E	    CALL    CrLf
 000001BA  BA 000005DD R	    MOV     EDX, OFFSET str_MsgAfterSignCheck
 000001BF  E8 00000000 E	    CALL    WriteString
 000001C4  8B 85 FFFFFCC4	    MOV     EAX, int_CrntTemp
 000001CA  E8 00000000 E	    CALL    WriteInt


				    ;   Cleanup then Finish Proc
 000001CF  5F			    POP	    EDI
 000001D0  5E			    POP 	ESI
 000001D1  5A			    POP	    EDX
 000001D2  59			    POP	    ECX
 000001D3  5B			    POP 	EBX
 000001D4  58			    POP	    EAX
 000001D5  C9		   *	    leave  
 000001D6  C2 0004		    RET     4

 000001D9			ParseTempsFromString ENDP
Proj6_pereze4.asm(326) : warning A6004:procedure argument or local not referenced : int_Len_Str_CrntTemp
Proj6_pereze4.asm(326) : warning A6004:procedure argument or local not referenced : int_RowIndex
Proj6_pereze4.asm(326) : warning A6004:procedure argument or local not referenced : int_ColIndex


				; ==========================================================================================================================
				; Negates an unsigned Integer
				; receives: Address of the current Temperature reading, an integer
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 000001D9			Negate_CurntTemp PROC
				    LOCAL originalValue:DWORD, negatedValue:DWORD

 000001D9  55		   *	    push   ebp
 000001DA  8B EC	   *	    mov    ebp, esp
 000001DC  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000001DF  50			    PUSH    EAX
 000001E0  53			    PUSH    EBX

				    ;------------------------------------------------------------
				    ; PARAMETER HANDLING:
				    ; [EBP+8] : offset_Int_CurntTemp - pointer to the integer value to be negated.
				    ;------------------------------------------------------------
 000001E1  8B 45 08		    MOV     EAX, [EBP+8]                ; EAX = pointer to the integer.
 000001E4  8B 18		    MOV     EBX, [EAX]                  ; Load the original integer value.
 000001E6  89 5D FC		    MOV     originalValue, EBX


				    ;------------------------------------------------------------
				    ; DEBUG PRINT: Print original integer value (optional).
				    ; MOV     EDX, OFFSET str_MsgOriginal  ; "ORIGINAL VALUE: "
				    ; CALL    CrLf
				    ; CALL    WriteString
				    ; MOV     EAX, originalValue
				    ; CALL    WriteInt
				    ; CALL    CrLf

				    ;------------------------------------------------------------
				    ; NEGATE THE INTEGER:
 000001E9  8B 5D FC		    MOV     EBX, originalValue          ; Copy original value to EBX.
 000001EC  F7 DB		    NEG     EBX                         ; EBX = -originalValue.
 000001EE  89 5D F8		    MOV     negatedValue, EBX           ; Store the negated value in local variable.

				    ;------------------------------------------------------------
				    ; STORE THE NEGATED VALUE:
 000001F1  8B 45 08		    MOV     EAX, [EBP + 8]
 000001F4  89 18		    MOV     [EAX], EBX        ; Write negated value back to memory.

				    ;------------------------------------------------------------
				    ; DEBUG PRINT: Print negated integer value (optional).
				    ; MOV     EDX, OFFSET str_MsgNegated   ; "NEGATED VALUE: "
				    ; CALL    CrLf
				    ; CALL    WriteString
				    ; MOV     EAX, negatedValue
				    ; CALL    WriteInt
				    ; CALL    CrLf


 000001F6  5B			    POP     EBX
 000001F7  58			    POP     EAX
 000001F8  C9		   *	    leave  
 000001F9  C2 0004		    RET     4
 000001FC			Negate_CurntTemp ENDP




				; ==========================================================================================================================
				; Converts the current string Temperature reading to Integer
				; receives: Address of the current Temperature reading
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 000001FC			ConvertStringToInteger PROC
				    LOCAL offset_Str_CurntTempLoc:DWORD
				    LOCAL len_Str_CurntTemp:DWORD
				    LOCAL numInt:DWORD
				    LOCAL loopCount:DWORD

 000001FC  55		   *	    push   ebp
 000001FD  8B EC	   *	    mov    ebp, esp
 000001FF  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 00000202  50			    PUSH    EAX
 00000203  53			    PUSH    EBX
 00000204  51			    PUSH    ECX
 00000205  52			    PUSH    EDX
 00000206  56			    PUSH    ESI
 00000207  57			    PUSH    EDI

				    ;------------------------------------------------------------
				    ; PARAMETERS:
				    ; [EBP+12] : offset_Int_CurntTemp  - pointer where the converted integer will be stored.
				    ; [EBP+8]  : offset_Str_CurntTemp - pointer to the ASCII string, null Terminated
				    ;
				    ; Store the string pointer in a local variable.
 00000208  8B 45 08		    MOV     EAX, [EBP + 8]
 0000020B  89 45 FC		    MOV     offset_Str_CurntTempLoc, EAX

				    ;------------------------------------------------------------
				    ; GET STRING LENGTH USING IRVINE STR_LENGTH:
 0000020E  8B 45 FC		    MOV     EAX, offset_Str_CurntTempLoc    ; Load pointer into EAX.
 00000211  E8 00000000 E	    CALL    Str_Length                      ; Returns length in EAX.
 00000216  89 45 F8		    MOV     len_Str_CurntTemp, EAX

				    ;------------------------------------------------------------
				    ; DEBUG PRINT: Print pointer value.
				    ;MOV     EDX, OFFSET STR_MSGPOINTER    ; "POINTER VALUE: "
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, offset_Str_CurntTempLoc
				    ;CALL    WriteDec
				    ;CALL    CrLf

				    ; DEBUG PRINT: Print passed string.
				    ;MOV     EDX, OFFSET STR_MSGPASSEDSTRING   ; "PASSED STRING: "
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EDX, offset_Str_CurntTempLoc
				    ;CALL    WriteString
				    ;CALL    CrLf

				    ; DEBUG PRINT: Print string length.
				    ;MOV     EDX, OFFSET STR_MSGLENGTH   ; "LENGTH: "
				    ;CALL    WriteString
				    ;MOV     EAX, len_Str_CurntTemp
				    ;CALL    WriteDec
				    ;CALL    CrLf

				    ;------------------------------------------------------------
				    ; INITIALIZE THE RESULT INTEGER.
 00000219  C7 45 F4		    MOV     numInt, 0
	   00000000

				    ;------------------------------------------------------------
				    ; SET UP POINTERS FOR CONVERSION:
				    ; Use ESI to point to the start of the string.
 00000220  8B 75 FC		    MOV     ESI, offset_Str_CurntTempLoc
				    ; Use ECX as a counter, set to the length of the string.
 00000223  8B 4D F8		    MOV     ECX, len_Str_CurntTemp


				    ;------------------------------------------------------------
				    ; CONVERSION LOOP:
				    ; For each character in the string, if it is between '0' and '9',
				    ; update numInt = 10 * numInt + (char - '0').
 00000226			    _convert_loop:
 00000226  AC			        LODSB                       ; Load byte from [ESI] into AL, ESI++, ECX--
 00000227  3C 00		        CMP     AL, 0
 00000229  74 1B		        JE      _end_convert_loop    ; If null terminator, end loop.
 0000022B  3C 30		        CMP     AL, '0'
 0000022D  72 17		        JB      _end_convert_loop    ; If char < '0', break.
 0000022F  3C 39		        CMP     AL, '9'
 00000231  77 13		        JA      _end_convert_loop    ; If char > '9', break.
				        ; Convert character to digit.
 00000233  0F B6 C0		        MOVZX   EAX, AL             ; Zero-extend AL into EAX.
 00000236  83 E8 30		        SUB     EAX, '0'            ; EAX = digit value.
				        ; Multiply current numInt by 10.
 00000239  8B 5D F4		        MOV     EBX, numInt
 0000023C  6B DB 0A		        IMUL    EBX, 10
 0000023F  03 D8		        ADD     EBX, EAX            ; Add digit value.
 00000241  89 5D F4		        MOV     numInt, EBX         ; Update numInt.
 00000244  E2 E0		        LOOP    _convert_loop

				    ; end loop and store the converted integer value
 00000246			    _end_convert_loop:
				        ;------------------------------------------------------------
				        ; DEBUG PRINT: Print the converted integer.
				        ; MOV     EDX, OFFSET STR_MSGCONVERTED   ; "CONVERTED INTEGER: "
				        ; CALL    CrLf
				        ; CALL    WriteString
				        ; MOV     EAX, numInt
				        ; CALL    WriteDec
				        ; CALL    CrLf

				        ;------------------------------------------------------------
				        ; STORE THE RESULT:
				        ; Save the converted integer at the memory location pointed to by offset_Int_CurntTemp.
 00000246  8B 5D 0C		        MOV     EBX, [EBP+12]
 00000249  8B 45 F4		        MOV     EAX, numInt
 0000024C  89 03		        MOV     DWORD PTR [EBX], EAX

				    ;------------------------------------------------------------
				    ; RESTORE REGISTERS AND RETURN.
 0000024E  5F			    POP     EDI
 0000024F  5E			    POP     ESI
 00000250  5A			    POP     EDX
 00000251  59			    POP     ECX
 00000252  5B			    POP     EBX
 00000253  58			    POP     EAX
 00000254  C9		   *	    leave  
 00000255  C2 0008		    RET     8
 00000258			ConvertStringToInteger ENDP
Proj6_pereze4.asm(511) : warning A6004:procedure argument or local not referenced : loopCount




				; ==========================================================================================================================
				; Detects sign of the current temp reading saved as string. Removes the sign
				; receives: Address of the Temperature reading
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================

 00000258			GetSign PROC
 00000258  55			    PUSH    EBP
 00000259  8B EC		    MOV     EBP, ESP
 0000025B  83 EC 04		    SUB     ESP, 4                ; Allocate 4 bytes for local variable (offset_Str_CurntTempLoc)

 0000025E  57			    PUSH    EDI
 0000025F  56			    PUSH    ESI
 00000260  52			    PUSH    EDX
 00000261  51			    PUSH    ECX
 00000262  53			    PUSH    EBX
 00000263  50			    PUSH    EAX

				    ;------------------------------------------------------------
				    ; Parameter Handling:
				    ; [EBP+8]  : offset_Str_CurntTemp - pointer to the string (e.g. "-15",0)
				    ; [EBP+12] : offset_Int_Sign      - pointer to the INT byte.
				    ;
				    ; Load the string pointer into EBX and store it in our local variable.
 00000264  8B 5D 08		    MOV     EBX, [EBP+8]          ; EBX = pointer to passed string.
 00000267  89 5D FC		    MOV     DWORD PTR [EBP-4], EBX  ; Store this pointer in local variable.

				    ;------------------------------------------------------------
				    ; Debug Print: Print pointer value.
				    ; MOV     EDX, OFFSET str_MsgPointer  ; "POINTER VALUE: "
				    ; CALL    CrLf
				    ; CALL    WriteString
				    ; MOV     EAX, EBX            ; Use EBX directly.
				    ; CALL    WriteDec
				    ; CALL    CrLf

				    ;------------------------------------------------------------
				    ; Debug Print: Print passed string.
				    ;MOV     EDX, OFFSET str_MsgPassedString  ; "PASSED STRING: "
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EDX, EBX
				    ;CALL    WriteString

				    ;------------------------------------------------------------
				    ; Read the first character from the string.
 0000026A  8B 45 FC		    MOV     EAX, [EBP-4]         ; Get stored pointer.
 0000026D  8A 00		    MOV     AL, BYTE PTR [EAX]   ; AL = first character.

				    ;------------------------------------------------------------
				    ; Debug Print: Print first character (as char and ASCII code).
				    ;MOV     EDX, OFFSET str_MsgFirstChar   ; "FIRST CHAR: "
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;CALL    WriteChar          ; Print character in AL.
				    ;CALL    CrLf
				    ;MOVZX   EAX, AL            ; Zero-extend AL.
				    ;MOV     EDX, OFFSET str_MsgASCII   ; " ASCII: "
				    ;CALL    WriteString
				    ;CALL    WriteDec           ; Print ASCII code.
				    ;CALL    CrLf

				    ;------------------------------------------------------------
				    ; Determine sign based solely on the first character.
 0000026F  3C 2D		    CMP     AL, '-'            ; If first character is '-'
 00000271  74 17		    JE      setNegative
 00000273  3C 2B		    CMP     AL, '+'            ; If first character is '+'
 00000275  74 1E		    JE      setPositive
 00000277  3C 30		    CMP     AL, '0'
 00000279  72 04		    JB      defaultPositive    ; If not a digit, default positive.
 0000027B  3C 39		    CMP     AL, '9'
 0000027D  77 00		    JA      defaultPositive    ; If not a digit, default positive.

 0000027F			defaultPositive:
				    ; First character is a digit; treat as positive.
 0000027F  8B 5D 0C		    MOV     EBX, [EBP+12]       ; Load pointer to int_Sign byte.
 00000282  C7 03 00000000	    MOV     DWORD PTR [EBX], 0   ; Set int_Sign to 0 (positive).
 00000288  EB 34		    JMP     printSign

 0000028A			setNegative:
				    ; First character is '-' sign.
 0000028A  8B 5D 0C		    MOV     EBX, [EBP+12]       ; Load pointer to int_Sign byte.
 0000028D  C7 03 00000001	    MOV     DWORD PTR [EBX], 1   ; Set int_Sign to 1 (negative).
 00000293  EB 0B		    JMP     shiftString

 00000295			setPositive:
				    ; First character is '+' sign.
 00000295  8B 5D 0C		    MOV     EBX, [EBP+12]       ; Load pointer to int_Sign byte.
 00000298  C7 03 00000000	    MOV     DWORD PTR [EBX], 0   ; Set int_Sign to 0 (positive).
 0000029E  EB 00		    JMP     shiftString

				    ;------------------------------------------------------------
 000002A0			shiftString:
				    ; Debug Print: Indicate that the string is being shifted.
				    ;MOV     EDX, OFFSET str_MsgShifting  ; "SHIFTING STRING..."
				    ;CALL    CrLf
				    ;CALL    WriteString

				    ; Shift the string left by one byte (remove the sign).
				    ; Use the local variable stored at [EBP-4] as the pointer.
 000002A0  8B 45 FC		    MOV     EAX, [EBP-4]        ; EAX = original string pointer.
 000002A3  83 C0 01		    ADD     EAX, 1              ; Point to the second character.
 000002A6  8B F0		    MOV     ESI, EAX            ; Source pointer = string + 1.
 000002A8  8B 45 FC		    MOV     EAX, [EBP-4]        ; Get original pointer again.
 000002AB  8B F8		    MOV     EDI, EAX            ; Destination pointer = original string pointer.
 000002AD  FC			    CLD                         ; Clear direction flag.
 000002AE			shift_loop:
 000002AE  AC			    LODSB                       ; Load byte from source (ESI) into AL; increments ESI.
 000002AF  AA			    STOSB                       ; Store byte in AL into destination (EDI); increments EDI.
 000002B0  3C 00		    CMP     AL, 0               ; Check for null terminator.
 000002B2  75 FA		    JNE     shift_loop
				    ; Debug Print: Print shifted string.
 000002B4  BA 0000064F R	    MOV     EDX, OFFSET str_MsgShiftedString  ; "SHIFTED STRING: "
				    ;CALL    CrLf
				    ;CALL    WriteString
 000002B9  8B 55 FC		    MOV     EDX, [EBP-4]        ; Local variable still holds original pointer.
				    ;CALL    WriteString
 000002BC  EB 00		    JMP     printSign

				    ;------------------------------------------------------------
 000002BE			printSign:
				    ; Debug Print: Print the obtained int_Sign value.
				    ;MOV     EDX, OFFSET str_MsgIntSign  ; "INT SIGN: "
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, [EBP+12]       ; Load pointer to int_Sign byte.
				    ;MOVZX   EAX, BYTE PTR [EAX] ; Get the sign value.
				    ;CALL    WriteDec            ; Print the sign value.
				    ;CALL    CrLf

				    ;------------------------------------------------------------
 000002BE			done:
 000002BE  58			    POP     EAX
 000002BF  5B			    POP     EBX
 000002C0  59			    POP     ECX
 000002C1  5A			    POP     EDX
 000002C2  5E			    POP     ESI
 000002C3  5F			    POP     EDI
 000002C4  8B E5		    MOV     ESP, EBP
 000002C6  5D			    POP     EBP
 000002C7  C2 0008		    RET     8
 000002CA			GetSign ENDP



				; ==========================================================================================================================
				; Extracts a temperature reading, in string delimited format, from memory. 
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 000002CA			Extract_StrCrntTemp PROC
				    ;-------------------------------------------------------------------
				    ; Local Variables:
				    ;   prev_DlmterPos      - stores the parameter int_Prev_DlmterPos (previous delimiter index)
				    ;   crnt_DlmterPos      - stores the parameter int_CrntDlmterPos (current delimiter index)
				    ;   file_TempReadingsLoc- stores the parameter offset_File_TempReadings (file buffer base address)
				    ;   startPos            - computed starting index for extraction (prev_DlmterPos + 1)
				    ;   stringLength        - length of the substring to extract (crnt_DlmterPos - startPos)
				    LOCAL prev_DlmterPos:DWORD
				    LOCAL crnt_DlmterPos:DWORD
				    LOCAL file_TempReadingsLoc:DWORD
				    LOCAL startPos:DWORD
				    LOCAL stringLength:DWORD

 000002CA  55		   *	    push   ebp
 000002CB  8B EC	   *	    mov    ebp, esp
 000002CD  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 000002D0  50			    PUSH    EAX
 000002D1  53			    PUSH    EBX
 000002D2  51			    PUSH    ECX
 000002D3  52			    PUSH    EDX
 000002D4  56			    PUSH    ESI
 000002D5  57			    PUSH    EDI

				    ;-------------------------------------------------------------------
				    ; Parameter Handling:
				    ; Parameters (from caller):
				    ;   [EBP+8]  : int_CrntDlmterPos   - current delimiter index.
				    ;   [EBP+12] : int_Prev_DlmterPos    - previous delimiter index.
				    ;   [EBP+16] : offset_str_CurntTemp  - destination address for the extracted string.
				    ;   [EBP+20] : offset_File_TempReadings - file buffer address.
				    ;
				    ; Load parameters into local variables with the updated order.
 000002D6  8B 45 0C		    MOV     EAX, [EBP+12]
 000002D9  89 45 FC		    MOV     prev_DlmterPos, EAX          ; Save previous delimiter position.
 000002DC  8B 45 08		    MOV     EAX, [EBP+8]
 000002DF  89 45 F8		    MOV     crnt_DlmterPos, EAX          ; Save current delimiter position.
 000002E2  8B 45 14		    MOV     EAX, [EBP+20]
 000002E5  89 45 F4		    MOV     file_TempReadingsLoc, EAX   ; Save file buffer base address.


				    ; Debugging Messages
 000002E8  BA 00000504 R	    MOV     EDX, OFFSET str_MsgLoadedFile
 000002ED  E8 00000000 E	    CALL    CrLf
 000002F2  E8 00000000 E	    CALL    CrLf
 000002F7  E8 00000000 E	    CALL    WriteString
 000002FC  8B 55 F4		    MOV     EDX, file_TempReadingsLoc
 000002FF  E8 00000000 E	    CALL    CrLf
 00000304  E8 00000000 E	    CALL    WriteString


 00000309  BA 000004C1 R	    MOV     EDX, OFFSET str_MsgPrevDlmtrPos
 0000030E  E8 00000000 E	    CALL    CrLf
 00000313  E8 00000000 E	    CALL    WriteString
 00000318  8B 45 FC		    MOV     EAX, prev_DlmterPos
 0000031B  E8 00000000 E	    CALL    WriteInt

 00000320  BA 000004E3 R	    MOV     EDX, OFFSET str_MsgCrntDlmtrPos
 00000325  E8 00000000 E	    CALL    CrLf
 0000032A  E8 00000000 E	    CALL    WriteString
 0000032F  8B 45 F8		    MOV     EAX, crnt_DlmterPos
 00000332  E8 00000000 E	    CALL    WriteInt


				    ;-------------------------------------------------------------------
				    ; Compute the Starting Position for Extraction:
				    ; startPos = prev_DlmterPos + 1  (skip the previous delimiter)
 00000337  8B 45 FC		    MOV     EAX, prev_DlmterPos
 0000033A  83 C0 01		    ADD     EAX, 1                     ; Advance one position past previous delimiter.
 0000033D  89 45 F0		    MOV     startPos, EAX              ; Save computed starting index.

				    ;-------------------------------------------------------------------
				    ; Compute the Length of the Substring to Extract:
				    ; stringLength = crnt_DlmterPos - startPos
 00000340  8B 45 F8		    MOV     EAX, crnt_DlmterPos
 00000343  2B 45 F0		    SUB     EAX, startPos              ; Compute number of characters to copy.
 00000346  89 45 EC		    MOV     stringLength, EAX          ; Save the computed string length.

				    ;-------------------------------------------------------------------
				    ; Debug Prints (Optional):
				    ; Display file buffer base address, start position, and string length.
				    ;MOV     EAX, file_TempReadingsLoc
				    ;CALL    CrLf
				    ;CALL    WriteDec
				    ;CALL    CrLf

 00000349  8B 45 F0		    MOV     EAX, startPos
				    ;CALL    WriteDec
				    ;CALL    CrLf

 0000034C  8B 45 EC		    MOV     EAX, stringLength
				    ;CALL    WriteDec
				    ;CALL    CrLf

				    ;-------------------------------------------------------------------
				    ; Check for non-positive string length (i.e. negative or zero length).
				    ; CMP     stringLength, 0
				    ; JLE     SkipCopy

				    ;-------------------------------------------------------------------
				    ; Set Up Source and Destination Pointers for Copy:
				    ; Source pointer = file_TempReadingsLoc + startPos
 0000034F  8B 45 F4		    MOV     EAX, file_TempReadingsLoc
 00000352  03 45 F0		    ADD     EAX, startPos              ; Compute effective source address.
 00000355  8B F0		    MOV     ESI, EAX                   ; ESI now points to the substring in the file buffer.
				    ;
				    ; Destination pointer = offset_str_CurntTemp (passed as parameter at [EBP+16])
 00000357  8B 45 10		    MOV     EAX, [EBP+16]
 0000035A  8B F8		    MOV     EDI, EAX                   ; EDI points to the destination buffer.

				    ;-------------------------------------------------------------------
				    ; Copy the Substring Using REP MOVSB:
				    ; Clear the Direction Flag to ensure auto-increment.
 0000035C  FC			    CLD
				    ; Set ECX = stringLength (number of bytes to copy).
 0000035D  8B 4D EC		    MOV     ECX, stringLength
 00000360  F3/ A4		    REP     MOVSB                    ; Copy ECX bytes from DS:ESI to ES:EDI.

				    ;SkipCopy:
				        ;-------------------------------------------------------------------
				        ; Append the NULL Terminator:
 00000362  B0 00		        MOV     AL, 0                     ; Prepare NULL in AL.
 00000364  AA			        STOSB                             ; Store AL at destination and increment EDI.

				        ; Debugging messages
				        ;MOV     EDX, [EBP+16]
				        ;CALL    CrLF
				        ;CALL    CrLf
				        ;CALL    WriteString

				    ;-------------------------------------------------------------------
				    ; Restore Registers and Return:
 00000365  5F			    POP     EDI
 00000366  5E			    POP     ESI
 00000367  5A			    POP     EDX
 00000368  59			    POP     ECX
 00000369  5B			    POP     EBX
 0000036A  58			    POP     EAX
 0000036B  C9		   *	    leave  
 0000036C  C2 0014		    RET     20                        ; Clean up 20 bytes (4 parameters) from the stack.
 0000036F			Extract_StrCrntTemp ENDP




				; ==========================================================================================================================
				; Searches for the next delimiter in the file buffer
				; receives: Address of the buffered file, offset of the matrix Length and Width placeholder
				; returns:
				; preconditions: passed address offsets
				; postconditions: values saved in memory
				; registers changed: none
				; ==========================================================================================================================
 0000036F			Get_NextDlmtrPos PROC
				    LOCAL crntDlmtrPos:DWORD
				    LOCAL prevDlmterPos:DWORD
				    LOCAL offset_File_TempReadingsLoc:DWORD

 0000036F  55		   *	    push   ebp
 00000370  8B EC	   *	    mov    ebp, esp
 00000372  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000375  50			    PUSH    EAX
 00000376  53			    PUSH    EBX
 00000377  51			    PUSH    ECX
 00000378  52			    PUSH    EDX
 00000379  56			    PUSH    ESI
 0000037A  57			    PUSH    EDI

				    ; Parameters:
				    ;   [EBP+8]  : int_PrevDlmterPos
				    ;              (DWORD) The index of the previous delimiter in the current row.
				    ;   [EBP+12] : offset_Int_CrntDlmtrPos
				    ;              (DWORD) The address in memory where the result (the current delimiter index) will be saved.
				    ;   [EBP+16] : offset_File_TempReadings
				    ;              (DWORD) The address of the file saved in memory buffer (Temperature readings).

				    ; Store passed parameters in local variables.
 0000037B  8B 45 08		    MOV     EAX, [EBP+8]  
 0000037E  89 45 F8		    MOV     prevDlmterPos, EAX                ; Save previous delimiter position.

				    ; Debugging messages
				    ;MOV     EDX, OFFSET str_MsgPrevDlmtrPos
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, prevDlmterPos
				    ;CALL    WriteInt

 00000381  8B 45 10		    MOV     EAX, [EBP+16]
 00000384  89 45 F4		    MOV     offset_File_TempReadingsLoc, EAX  ; Save file buffer base address.


				    ; Debugging messages
				    ;MOV     EDX, OFFSET str_MsgLoadedFile
				    ;CALL    CrLF
				    ;CALL    WriteString
				    ;MOV     EDX, offset_File_TempReadingsLoc
				    ;CALL    CrLF
				    ;CALL    WriteString

				    ; Compute starting address for search:
				    ; Start searching at (prevDlmterPos + 1) relative to the file buffer.
 00000387  8B 45 F8		    MOV     EAX, prevDlmterPos
 0000038A  83 C0 01		    ADD     EAX, 1                                      ; Next search index.
 0000038D  8B 5D F4		    MOV     EBX, offset_File_TempReadingsLoc            ; Load base address.
 00000390  03 D8		    ADD     EBX, EAX                                    ; EBX now points to the search start position.
 00000392  8B F3		    MOV     ESI, EBX                                    ; Set ESI to the starting search pointer.

				    ; Search for next delimiter value in the file
 00000394			    _searchLoop2:
 00000394  AC			        LODSB                                           ; Load byte at [ESI] into AL; ESI increments automatically.
 00000395  3C 2C		        CMP     AL, DELIMITER                           ; Compare byte with the delimiter
 00000397  74 02		        JE      _found_Dlmtr
 00000399  EB F9		        JMP     _searchLoop2                            ; Continue scanning

				    ; Jump here once the next delimiter is found
 0000039B			    _found_Dlmtr:
				        ; ESI now points one byte past the found delimiter.
 0000039B  8B C6		        MOV     EAX, ESI
 0000039D  48			        DEC     EAX                                     ; Adjust: EAX now points to the delimiter itself.
 0000039E  89 45 FC		        MOV     crntDlmtrPos, EAX                       ; Store current delimiter absolute position.

				        ; Calculate the delimiter's index relative to the file buffer.
 000003A1  8B 4D F4		        MOV     ECX, offset_File_TempReadingsLoc        ; Base address.
 000003A4  29 4D FC		        SUB     crntDlmtrPos, ECX                       ; crntDlmtrPos now holds the index.


				        ; Check for CRLF between previous delimiter and current delimiter.
				        ; Scan from (prevDlmterPos + 1) up to the found delimiter index.
 000003A7  8B 45 F8		        MOV     EAX, prevDlmterPos
 000003AA  83 C0 01		        ADD     EAX, 1                                  ; Starting index for scan.
 000003AD  8B 5D FC		        MOV     EBX, crntDlmtrPos                       ; EBX holds current delimiter index.
 000003B0  8B F8		        MOV     EDI, EAX                                ; EDI is our scanning index.

 000003B2			    _adjustLoop:
 000003B2  3B FB		        CMP     EDI, EBX
 000003B4  7D 19		        JGE     _doneAdjust                             ; If scanning index >= current delimiter index, finish.
 000003B6  8A 44 3D F4		        MOV     AL, BYTE PTR [offset_File_TempReadingsLoc + EDI]
 000003BA  3C 0D		        CMP     AL, 0Dh
 000003BC  74 03		        JE      _checkLF
 000003BE  47			        INC     EDI
 000003BF  EB F1		        JMP     _adjustLoop

 000003C1			    _checkLF:
 000003C1  80 7C 3D F5 0A	        CMP     BYTE PTR [offset_File_TempReadingsLoc + EDI + 1], 0Ah
 000003C6  74 03		        JE      _foundCRLF
 000003C8  47			        INC     EDI
 000003C9  EB E7		        JMP     _adjustLoop

 000003CB			    _foundCRLF:
 000003CB  83 45 FC 02		        ADD     crntDlmtrPos, 2            ; Adjust current delimiter index by adding 2.


 000003CF			    _doneAdjust:
				        ; Save the result in the memory location pointed to by offset_Int_CrntDlmtrPos.
 000003CF  8B 45 FC		        MOV     EAX, crntDlmtrPos
 000003D2  8B 55 0C		        MOV     EDX, [EBP+12]
 000003D5  89 02		        MOV     [EDX], EAX

				        ; Debug printouts:
				        ;MOV     EDX, OFFSET str_MsgCrntDlmtrPos
				        ;CALL    CrLf
				        ;CALL    WriteString
				        ;CALL    WriteDec


 000003D7  5F			        POP     EDI
 000003D8  5E			        POP     ESI
 000003D9  5A			        POP     EDX
 000003DA  59			        POP     ECX
 000003DB  5B			        POP     EBX
 000003DC  58			        POP     EAX
 000003DD  C9		   *	    leave  
 000003DE  C2 000C		        RET     12
 000003E1			Get_NextDlmtrPos ENDP




				; ==========================================================================================================================
				; Gathers the Length and Width og the matrix
				; receives: Address of the buffered file, offset of the matrix Length and Width placeholder
				; returns:
				; preconditions: passed address offsets
				; postconditions: values saved in memory
				; registers changed: none
				; ==========================================================================================================================
 000003E1			Get_MatrixSize PROC

				    LOCAL int_NumRows:DWORD
				    LOCAL int_NumCols:DWORD
				    LOCAL offset_File_TempReadings:DWORD
				    LOCAL rowHasData:BYTE

 000003E1  55		   *	    push   ebp
 000003E2  8B EC	   *	    mov    ebp, esp
 000003E4  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 000003E7  50			    PUSH    EAX
 000003E8  53			    PUSH    EBX
 000003E9  51			    PUSH    ECX
 000003EA  52			    PUSH    EDX
 000003EB  56			    PUSH    ESI
 000003EC  57			    PUSH    EDI


				    ; Parameters
				    ; [EBP + 16] int_WidthMatrix
				    ; [EBP + 12] int_LenMatrix
				    ; [EBP + 8]  offset_File_TempReadings

				    ; Load file address into ESI
 000003ED  8B 45 08		    MOV     EAX, [EBP + 8]
 000003F0  89 45 F4		    MOV     offset_File_TempReadings, EAX
 000003F3  8B 75 F4		    MOV     ESI, offset_File_TempReadings       ; Had to abandon use of local variable, use ESI instead to make use of LODSB

				    ; Initialize counters and flag
 000003F6  C7 45 FC		    MOV     int_NumRows, 0
	   00000000
 000003FD  C7 45 F8		    MOV     int_NumCols, 0                      ; Column count is based on delimiters (+ 1 if non-empty)
	   00000000
 00000404  C6 45 F3 00		    MOV     rowHasData, 0

				    ; ----------------------------------------------------------------
				    ; Process the first row: count columns and check for non-empty line
 00000408			    _countCols:
 00000408  AC			        LODSB                                   ; Load next byte from [ESI] into AL and increment ESI
 00000409  8A D8		        MOV     BL, AL                          ; Save the character in BL

 0000040B  80 FB 00		        CMP     BL, 0                           ; End-of-file?
 0000040E  74 49		        JE      _end_Get_MatrixSize

 00000410  80 FB 0D		        CMP     BL, 0Dh                          ; Skip CR (Carriage Return)
 00000413  74 F3		        JE      _countCols

 00000415  80 FB 0A		        CMP     BL, 0Ah                     ; LF indicates end-of-line
 00000418  74 10		        JE      _finishFirstRow

				        ; Non CR/LF character: mark the row as non-empty
 0000041A  C6 45 F3 01		        MOV     rowHasData, 1

 0000041E  80 FB 2C		        CMP     BL, DELIMITER                     ; Check for delimiter
 00000421  75 03		        JNE     _continueCols
 00000423  FF 45 F8		        INC     int_NumCols

				    ; Jump here if encountered delimiter
 00000426			    _continueCols:
 00000426  8A C3		        MOV     AL, BL
 00000428  EB DE		        JMP     _countCols

				    ; At the end of the first row, count it if it contains data.
 0000042A			    _finishFirstRow:

 0000042A  80 7D F3 01		    CMP     rowHasData, 1
 0000042E  75 03		    JNE     _skipFirstRow
 00000430  FF 45 FC		    INC     int_NumRows

				    ; Assume file has at least one row
 00000433			    _skipFirstRow:
 00000433  C6 45 F3 00		        MOV     rowHasData, 0               ; Reset flag for next row


				    ; Process subsequent rows
 00000437			    _countRows:
 00000437  AC			        LODSB                               ; Load next byte
 00000438  3C 00		        CMP     AL, 0                       ; End-of-file?
 0000043A  74 1D		        JE      _end_Get_MatrixSize
 0000043C  3C 0D		        CMP     AL, 0Dh                     ; Skip CR (Carriage Return)
 0000043E  74 F7		        JE      _countRows
 00000440  3C 0A		        CMP     AL, 0Ah                     ; LF indicates end-of-line
 00000442  74 06		        JE      _endOfRow
				        ; Non CR/LF character: mark the row as non-empty
 00000444  C6 45 F3 01		        MOV     rowHasData, 1
 00000448  EB ED		        JMP     _countRows

				    ; At the end of a row, count it if it contains data.
 0000044A			    _endOfRow:
 0000044A  80 7D F3 01		    CMP     rowHasData, 1
 0000044E  75 03		    JNE     _resetRow
 00000450  FF 45 FC		    INC     int_NumRows

				    ; Reset flag for the next row
 00000453			    _resetRow:
 00000453  C6 45 F3 00		        MOV     rowHasData, 0       
 00000457  EB DE		        JMP     _countRows

				     
				    ; check if final row has data
 00000459			    _end_Get_MatrixSize:
 00000459  80 7D F3 01		    CMP     rowHasData, 1
 0000045D  74 02		    JE      _addFinalRow
 0000045F  EB 05		    JMP    _storeCounts 


				    ; Jump here if final Row has data to count it
 00000461			    _addFinalRow:
 00000461  FF 45 FC		        INC     int_NumRows
 00000464  EB 00		        JMP     _storeCounts

				    ; Store the row and column counts in the provided output addresses.
 00000466			    _storeCounts:

 00000466  8B 45 FC		    MOV     EAX, int_NumRows
 00000469  8B 7D 0C		    MOV     EDI, [EBP + 12]
 0000046C  89 07		    MOV     DWORD PTR [EDI], EAX

 0000046E  8B 45 F8		    MOV     EAX, int_NumCols
 00000471  8B 7D 10		    MOV     EDI, [EBP + 16]
 00000474  89 07		    MOV     DWORD PTR [EDI], EAX

 00000476  5F			    POP     EDI
 00000477  5E			    POP     ESI
 00000478  5A			    POP     EDX
 00000479  59			    POP     ECX
 0000047A  5B			    POP     EBX
 0000047B  58			    POP     EAX
 0000047C  C9		   *	    leave  
 0000047D  C2 000C		    RET     12

 00000480			Get_MatrixSize ENDP

				; ==========================================================================================================================
				; Init Temp Matrix
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================

 00000480			Init_TempMatrix PROC
 00000480  55			    PUSH    EBP
 00000481  8B EC		    MOV     EBP, ESP

 00000483  50			    PUSH    EAX
 00000484  53			    PUSH    EBX
 00000485  51			    PUSH    ECX
 00000486  52			    PUSH    EDX
 00000487  56			    PUSH    ESI
 00000488  57			    PUSH    EDI

				    ;-------------------------------------------------------------------
				    ; Parameters:
				    ;   [EBP+12] : OFFSET arr_TempMatrix
				    ;   [EBP+8] : length_Arr_TempMatrix


				    ; Debugging prints
				    ;MOV     EAX, [EBP+12]
				    ;CALL    CrLf
				    ;CALL     WriteDec
				    ;MOV     EAX, [EBP + 8]
				    ;CALL    CrLf
				    ;CALL    WriteDec
				    ;CALL    CrLf


				    ;==================================================================
				    ; Initialize Temp Matrix with value 1
 00000489  8B 4D 08		    MOV ECX, [EBP + 8]                                  ; Loop counter - LENGHTOF Array
 0000048C  8B 7D 0C		    MOV EDI, [EBP+12]                                   ; Load address of the array into EDI
 0000048F  B8 00000001		    MOV EAX, 1                                          ; Value to initialize (1)

				    ; Loop to initialize Temp Matrix
 00000494			    _InitLoop:
 00000494  89 07		        MOV DWORD PTR [EDI], EAX                         ; Store 1 at current position
 00000496  83 C7 04		        ADD EDI, 4                                       ; Move to the next DWORD (4 bytes)
 00000499  E2 F9		        LOOP _InitLoop                                   ; Decrement ECX, loop if not zero


 0000049B  8B 4D 08		        MOV ECX, [EBP+8]                                ; Set loop counter
 0000049E  8B 75 0C		        MOV ESI, [EBP+12]                               ; Load base address of array

				    ; Print array
				    ;_PrintLoop:
				    ;    MOV EAX, DWORD PTR [ESI]                        ; Load current array value
				    ;    CALL WriteDec                                   ; Print number
				    ;    MOV AL, ' '
				    ;    CALL WriteChar
				    ;    ADD ESI, 4                                      ; Move to next DWORD
				    ;    LOOP _PrintLoop                                 ; Repeat until ECX = 0

				 
				    ;-------------------------------------------------------------------
				    ; Restore Registers and Return:
 000004A1  5F			    POP     EDI
 000004A2  5E			    POP     ESI
 000004A3  5A			    POP     EDX
 000004A4  59			    POP     ECX
 000004A5  5B			    POP     EBX
 000004A6  58			    POP     EAX
 000004A7  5D			    POP     EBP
 000004A8  C2 0008		    RET     8
 000004AB			Init_TempMatrix ENDP



				END main
Microsoft (R) Macro Assembler Version 14.29.30158.0	    03/14/25 23:59:18
*Temp List Reverser     (Proj6_pereze4.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayChar . . . . . . . . . .	Proc
mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000069B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004AB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConvertStringToInteger . . . . .	P Near	 000001FC _TEXT	Length= 0000005C Public STDCALL
  offset_Str_CurntTempLoc  . . .	DWord	 bp - 00000004
  len_Str_CurntTemp  . . . . . .	DWord	 bp - 00000008
  numInt . . . . . . . . . . . .	DWord	 bp - 0000000C
  loopCount  . . . . . . . . . .	DWord	 bp - 00000010
  _convert_loop  . . . . . . . .	L Near	 00000226 _TEXT	
  _end_convert_loop  . . . . . .	L Near	 00000246 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Extract_StrCrntTemp  . . . . . .	P Near	 000002CA _TEXT	Length= 000000A5 Public STDCALL
  prev_DlmterPos . . . . . . . .	DWord	 bp - 00000004
  crnt_DlmterPos . . . . . . . .	DWord	 bp - 00000008
  file_TempReadingsLoc . . . . .	DWord	 bp - 0000000C
  startPos . . . . . . . . . . .	DWord	 bp - 00000010
  stringLength . . . . . . . . .	DWord	 bp - 00000014
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSign  . . . . . . . . . . . .	P Near	 00000258 _TEXT	Length= 00000072 Public STDCALL
  defaultPositive  . . . . . . .	L Near	 0000027F _TEXT	
  setNegative  . . . . . . . . .	L Near	 0000028A _TEXT	
  setPositive  . . . . . . . . .	L Near	 00000295 _TEXT	
  shiftString  . . . . . . . . .	L Near	 000002A0 _TEXT	
  shift_loop . . . . . . . . . .	L Near	 000002AE _TEXT	
  printSign  . . . . . . . . . .	L Near	 000002BE _TEXT	
  done . . . . . . . . . . . . .	L Near	 000002BE _TEXT	
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Get_MatrixSize . . . . . . . . .	P Near	 000003E1 _TEXT	Length= 0000009F Public STDCALL
  int_NumRows  . . . . . . . . .	DWord	 bp - 00000004
  int_NumCols  . . . . . . . . .	DWord	 bp - 00000008
  offset_File_TempReadings . . .	DWord	 bp - 0000000C
  rowHasData . . . . . . . . . .	Byte	 bp - 0000000D
  _countCols . . . . . . . . . .	L Near	 00000408 _TEXT	
  _continueCols  . . . . . . . .	L Near	 00000426 _TEXT	
  _finishFirstRow  . . . . . . .	L Near	 0000042A _TEXT	
  _skipFirstRow  . . . . . . . .	L Near	 00000433 _TEXT	
  _countRows . . . . . . . . . .	L Near	 00000437 _TEXT	
  _endOfRow  . . . . . . . . . .	L Near	 0000044A _TEXT	
  _resetRow  . . . . . . . . . .	L Near	 00000453 _TEXT	
  _end_Get_MatrixSize  . . . . .	L Near	 00000459 _TEXT	
  _addFinalRow . . . . . . . . .	L Near	 00000461 _TEXT	
  _storeCounts . . . . . . . . .	L Near	 00000466 _TEXT	
Get_NextDlmtrPos . . . . . . . .	P Near	 0000036F _TEXT	Length= 00000072 Public STDCALL
  crntDlmtrPos . . . . . . . . .	DWord	 bp - 00000004
  prevDlmterPos  . . . . . . . .	DWord	 bp - 00000008
  offset_File_TempReadingsLoc  .	DWord	 bp - 0000000C
  _searchLoop2 . . . . . . . . .	L Near	 00000394 _TEXT	
  _found_Dlmtr . . . . . . . . .	L Near	 0000039B _TEXT	
  _adjustLoop  . . . . . . . . .	L Near	 000003B2 _TEXT	
  _checkLF . . . . . . . . . . .	L Near	 000003C1 _TEXT	
  _foundCRLF . . . . . . . . . .	L Near	 000003CB _TEXT	
  _doneAdjust  . . . . . . . . .	L Near	 000003CF _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Init_TempMatrix  . . . . . . . .	P Near	 00000480 _TEXT	Length= 0000002B Public STDCALL
  _InitLoop  . . . . . . . . . .	L Near	 00000494 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Negate_CurntTemp . . . . . . . .	P Near	 000001D9 _TEXT	Length= 00000023 Public STDCALL
  originalValue  . . . . . . . .	DWord	 bp - 00000004
  negatedValue . . . . . . . . .	DWord	 bp - 00000008
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseTempsFromString . . . . . .	P Near	 00000050 _TEXT	Length= 00000189 Public STDCALL
  arr_TempMatrix . . . . . . . .	DWord	 bp - 00000320
  str_CurntTemp  . . . . . . . .	Byte	 bp - 00000325
  int_Len_Str_CrntTemp . . . . .	DWord	 bp - 0000032C
  int_Sign . . . . . . . . . . .	DWord	 bp - 00000330
  int_RowIndex . . . . . . . . .	DWord	 bp - 00000334
  int_ColIndex . . . . . . . . .	DWord	 bp - 00000338
  int_CrntTemp . . . . . . . . .	DWord	 bp - 0000033C
  int_PrevDlmterPos  . . . . . .	DWord	 bp - 00000340
  int_CrntDlmterPos  . . . . . .	DWord	 bp - 00000344
  offset_File_TempReadings . . .	DWord	 bp - 00000348
  int_LenMatrix  . . . . . . . .	DWord	 bp - 0000034C
  int_WidthMatrix  . . . . . . .	DWord	 bp - 00000350
  _Save_ToTempMatrix . . . . . .	L Near	 000001B5 _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000050 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DELIMITER  . . . . . . . . . . .	Number	 0000002Ch   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STR_MSGASCII . . . . . . . . . .	Byte	 00000633 _DATA	
STR_MSGCONVERTED . . . . . . . .	Byte	 00000687 _DATA	
STR_MSGCONVERTING  . . . . . . .	Byte	 00000674 _DATA	
STR_MSGFIRSTCHAR . . . . . . . .	Byte	 00000626 _DATA	
STR_MSGINTSIGN . . . . . . . . .	Byte	 00000660 _DATA	
STR_MSGLENGTH  . . . . . . . . .	Byte	 0000066B _DATA	
STR_MSGPASSEDSTRING  . . . . . .	Byte	 00000616 _DATA	
STR_MSGPOINTER . . . . . . . . .	Byte	 00000606 _DATA	
STR_MSGSHIFTEDSTRING . . . . . .	Byte	 0000064F _DATA	
STR_MSGSHIFTING  . . . . . . . .	Byte	 0000063C _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEMPS_PER_DAY  . . . . . . . . .	Number	 00000018h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
file_TempReadings  . . . . . . .	Byte	 000000A0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
int_BufferSizeFileName . . . . .	DWord	 00000488 _DATA	
int_BufferSizeTemperatureFile  .	DWord	 00000490 _DATA	
int_LenNameOfFile  . . . . . . .	DWord	 0000048C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
str_MsgAfterSignCheck  . . . . .	Byte	 000005DD _DATA	
str_MsgConvertedInt  . . . . . .	Byte	 000005BF _DATA	
str_MsgCrntDlmtrPos  . . . . . .	Byte	 000004E3 _DATA	
str_MsgCurrentTempIteration  . .	Byte	 00000516 _DATA	
str_MsgLoadedFile  . . . . . . .	Byte	 00000504 _DATA	
str_MsgNumberofColumns . . . . .	Byte	 000004A9 _DATA	
str_MsgNumberofRows  . . . . . .	Byte	 00000494 _DATA	
str_MsgPrevDlmtrPos  . . . . . .	Byte	 000004C1 _DATA	
str_MsgPromptFileName  . . . . .	Byte	 00000000 _DATA	
str_MsgSignRemoved . . . . . . .	Byte	 0000057E _DATA	
str_MsgSign  . . . . . . . . . .	Byte	 00000542 _DATA	
str_NameOfFile . . . . . . . . .	Byte	 0000003C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   4 Warnings
	   0 Errors
