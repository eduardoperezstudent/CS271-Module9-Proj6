Microsoft (R) Macro Assembler Version 14.29.30158.0	    03/15/25 07:41:50
*Temp List Reverser     (Proj6_pereze4.asm		     Page 1 - 1


				TITLE Temp List Reverser     (Proj6_pereze4.asm)

				; Author: Eduardo Perez
				; Last Modified: March 16, 2025
				; OSU email address: pereze4@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6               Due Date: March 16, 2025
				; Description: This program loads a text file. The file contains Temperature values, each separated by a delimiter.
				; Each Temperature values are extracted ONE AT A TIME; converted to it's integer value format, and then stored in an array.
				; The values are then displayed in reverse order as they are stored.
				; Implementation note 1:    LODSB is used in detecting delimiter positions and presence of Cr Lf. 
				;                           MOVSB is utilized in extracting current Temp reading iteration from the file.
				;                           LODSB is utlized to convert a Temp reading from str to int format
				; Implementation note 2:    Can accept Temp readings with prefix '+' or '-', and/or a leading zero
				; Implementation note 3:    Program dynamically determines the number of columns of the character delimited file. It doesnt utilize TEMPS_PER_DAY
				; Limitation:   Maximum 250 Temperature reading.    

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				;=================================
				; Macros

				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:
				mGetString MACRO str_Message, buffer, bufferSize, fileByteSize
				    PUSH    EAX
				    PUSH    ECX
				    PUSH    EDX
				    ; Display prompt message
				    MOV EDX, OFFSET str_Message
				    CALL WriteString  
				    
				    ; Get user input
				    MOV EDX, OFFSET buffer
				    MOV ECX, bufferSize
				    CALL ReadString  

				    ; Store number of bytes read
				    MOV fileByteSize, EAX

				    POP     EDX
				    POP     ECX
				    POP     EAX
				ENDM

				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:

				mDisplayString MACRO str_Message
				    PUSH    EDX

				    MOV     EDX, OFFSET str_Message
				    CALL    WriteString

				    POP     EDX
				ENDM


				;=================================================================================
				; Description:
				; Parameters:
				; Local Variables:
				; Registers used:

				mDisplayChar MACRO charValue
				    PUSH EAX
				    
				    MOV AL, charValue
				    CALL WriteChar

				    POP EAX
				ENDM



				;=================================
				; Global Variables
 = 00000018			TEMPS_PER_DAY = 24
 = 0000002C			DELIMITER   EQU ','


 00000000			.data

 00000000 00000000		fileHandle                      DWORD ?                     

 00000004 47 69 76 65 20	str_MsgPromptFileName           BYTE    "Give the name of file containing the Temperature Readings: ", 0
	   74 68 65 20 6E
	   61 6D 65 20 6F
	   66 20 66 69 6C
	   65 20 63 6F 6E
	   74 61 69 6E 69
	   6E 67 20 74 68
	   65 20 54 65 6D
	   70 65 72 61 74
	   75 72 65 20 52
	   65 61 64 69 6E
	   67 73 3A 20 00


 00000040  00000064 [		str_NameOfFile                  BYTE    100 DUP(0)                  ; Memory buffer for file name
	    00
	   ]
 000000A4  000003E8 [		file_TempReadings               BYTE    1000 DUP(255)               ; Memory buffer for file containing the temperature readings
	    FF
	   ]
				                  
 0000048C 00000063		int_BufferSizeFileName          DWORD   99
 00000490 00000000		int_LenNameOfFile               DWORD   ?                           ; Stores the number of bytes read
 00000494 000003E7		int_BufferSizeTemperatureFile   DWORD   999

 00000498 54 68 65 20 6E	str_MsgNumberofRows             BYTE    "The number of rows: ", 0
	   75 6D 62 65 72
	   20 6F 66 20 72
	   6F 77 73 3A 20
	   00
 000004AD 54 68 65 20 6E	str_MsgNumberofColumns          BYTE    "The number of columns: ", 0
	   75 6D 62 65 72
	   20 6F 66 20 63
	   6F 6C 75 6D 6E
	   73 3A 20 00
 000004C5 54 68 65 20 70	str_MsgPrevDlmtrPos             BYTE    "The previous delimiter position: ", 0
	   72 65 76 69 6F
	   75 73 20 64 65
	   6C 69 6D 69 74
	   65 72 20 70 6F
	   73 69 74 69 6F
	   6E 3A 20 00
 000004E7 54 68 65 20 63	str_MsgCrntDlmtrPos             BYTE    "The current delimiter position: ", 0
	   75 72 72 65 6E
	   74 20 64 65 6C
	   69 6D 69 74 65
	   72 20 70 6F 73
	   69 74 69 6F 6E
	   3A 20 00
 00000508 54 68 65 20 4C	str_MsgLoadedFile               BYTE    "The Loaded file: ", 0
	   6F 61 64 65 64
	   20 66 69 6C 65
	   3A 20 00
 0000051A 54 68 65 20 65	str_MsgCurrentTempIteration     BYTE    "The extracted current Temperature reading: ", 0
	   78 74 72 61 63
	   74 65 64 20 63
	   75 72 72 65 6E
	   74 20 54 65 6D
	   70 65 72 61 74
	   75 72 65 20 72
	   65 61 64 69 6E
	   67 3A 20 00
 00000546 54 68 65 20 73	str_MsgSign                     BYTE    "The sign bit of the extracted current Temperature reading: ", 0
	   69 67 6E 20 62
	   69 74 20 6F 66
	   20 74 68 65 20
	   65 78 74 72 61
	   63 74 65 64 20
	   63 75 72 72 65
	   6E 74 20 54 65
	   6D 70 65 72 61
	   74 75 72 65 20
	   72 65 61 64 69
	   6E 67 3A 20 00
 00000582 54 68 65 20 65	str_MsgSignRemoved              BYTE    "The extracted current Temperature reading, sign removed if any: ", 0
	   78 74 72 61 63
	   74 65 64 20 63
	   75 72 72 65 6E
	   74 20 54 65 6D
	   70 65 72 61 74
	   75 72 65 20 72
	   65 61 64 69 6E
	   67 2C 20 73 69
	   67 6E 20 72 65
	   6D 6F 76 65 64
	   20 69 66 20 61
	   6E 79 3A 20 00
 000005C3 54 68 65 20 63	str_MsgConvertedInt             BYTE    "The converted integer value: ", 0
	   6F 6E 76 65 72
	   74 65 64 20 69
	   6E 74 65 67 65
	   72 20 76 61 6C
	   75 65 3A 20 00
 000005E1 54 68 65 20 69	str_MsgAfterSignCheck           BYTE    "The integer value after the sign check: ", 0
	   6E 74 65 67 65
	   72 20 76 61 6C
	   75 65 20 61 66
	   74 65 72 20 74
	   68 65 20 73 69
	   67 6E 20 63 68
	   65 63 6B 3A 20
	   00
 0000060A 54 68 65 20 61	str_MsgAddressOfMatrix          BYTE    "The address of the matrix in the calling procedure: ",0
	   64 64 72 65 73
	   73 20 6F 66 20
	   74 68 65 20 6D
	   61 74 72 69 78
	   20 69 6E 20 74
	   68 65 20 63 61
	   6C 6C 69 6E 67
	   20 70 72 6F 63
	   65 64 75 72 65
	   3A 20 00



 0000063F  0000012C [		arr_TempMatrix                  DWORD   300 DUP(1)
	    00000001
	   ]


				; For debugging PROC GetSign
 00000AEF 50 4F 49 4E 54	STR_MSGPOINTER         BYTE "POINTER VALUE: ",0
	   45 52 20 56 41
	   4C 55 45 3A 20
	   00
 00000AFF 50 41 53 53 45	STR_MSGPASSEDSTRING    BYTE "PASSED STRING: ",0
	   44 20 53 54 52
	   49 4E 47 3A 20
	   00
 00000B0F 46 49 52 53 54	STR_MSGFIRSTCHAR       BYTE "FIRST CHAR: ",0
	   20 43 48 41 52
	   3A 20 00
 00000B1C 20 41 53 43 49	STR_MSGASCII           BYTE " ASCII: ",0
	   49 3A 20 00
 00000B25 53 48 49 46 54	STR_MSGSHIFTING        BYTE "SHIFTING STRING...",0
	   49 4E 47 20 53
	   54 52 49 4E 47
	   2E 2E 2E 00
 00000B38 53 48 49 46 54	STR_MSGSHIFTEDSTRING   BYTE "SHIFTED STRING: ",0
	   45 44 20 53 54
	   52 49 4E 47 3A
	   20 00
 00000B49 49 4E 54 20 53	STR_MSGINTSIGN         BYTE "INT SIGN: ",0
	   49 47 4E 3A 20
	   00

				; For debugging PROC ConvertStrToInteger
 00000B54 4C 45 4E 47 54	STR_MSGLENGTH        BYTE "LENGTH: ",0
	   48 3A 20 00
 00000B5D 43 4F 4E 56 45	STR_MSGCONVERTING    BYTE "CONVERTING STRING:",0
	   52 54 49 4E 47
	   20 53 54 52 49
	   4E 47 3A 00
 00000B70 43 4F 4E 56 45	STR_MSGCONVERTED     BYTE "CONVERTED INTEGER: ",0
	   52 54 45 44 20
	   49 4E 54 45 47
	   45 52 3A 20 00

				; For Debugging PROC Save Temp to Matrix
 00000B84 43 55 52 52 45	str_MsgCurrentTemp          BYTE "CURRENT TEMP: ",0
	   4E 54 20 54 45
	   4D 50 3A 20 00
 00000B93 52 4F 57 20 49	str_MsgRowIndex             BYTE "ROW INDEX: ",0
	   4E 44 45 58 3A
	   20 00
 00000B9F 43 4F 4C 20 49	str_MsgColIndex             BYTE "COL INDEX: ",0
	   4E 44 45 58 3A
	   20 00
 00000BAB 4D 41 54 52 49	str_MsgMatrixPtr            BYTE "MATRIX PTR: ",0
	   58 20 50 54 52
	   3A 20 00
 00000BB8 45 4C 45 4D 45	str_MsgElementIndex         BYTE "ELEMENT INDEX: ",0
	   4E 54 20 49 4E
	   44 45 58 3A 20
	   00
 00000BC8 42 59 54 45 20	str_MsgByteOffset           BYTE "BYTE OFFSET: ",0
	   4F 46 46 53 45
	   54 3A 20 00
 00000BD6 44 45 53 54 49	str_MsgDestAddress          BYTE "DESTINATION ADDRESS: ",0
	   4E 41 54 49 4F
	   4E 20 41 44 44
	   52 45 53 53 3A
	   20 00
 00000BEC 53 41 56 45 44	str_MsgSavedInteger         BYTE "SAVED INTEGER: ",0
	   20 49 4E 54 45
	   47 45 52 3A 20
	   00




 00000000			.code
 00000000			main PROC

				    ;=================================
				    ; Get File name
				    mGetString str_MsgPromptFileName, str_NameOfFile, int_BufferSizeFileName, int_LenNameOfFile
 00000000  50		     1	    PUSH    EAX
 00000001  51		     1	    PUSH    ECX
 00000002  52		     1	    PUSH    EDX
 00000003  BA 00000004 R     1	    MOV EDX, OFFSET str_MsgPromptFileName
 00000008  E8 00000000 E     1	    CALL WriteString  
 0000000D  BA 00000040 R     1	    MOV EDX, OFFSET str_NameOfFile
 00000012  8B 0D 0000048C R  1	    MOV ECX, int_BufferSizeFileName
 00000018  E8 00000000 E     1	    CALL ReadString  
 0000001D  A3 00000490 R     1	    MOV int_LenNameOfFile, EAX
 00000022  5A		     1	    POP     EDX
 00000023  59		     1	    POP     ECX
 00000024  58		     1	    POP     EAX



				    ;=================================
				    ; Open File
 00000025  BA 00000040 R	    MOV     EDX, OFFSET str_NameOfFile
 0000002A  E8 00000000 E	    CALL    OpenInputFile
 0000002F  A3 00000000 R	    MOV     fileHandle, EAX

 00000034  8B 0D 00000494 R	    MOV     ECX, int_BufferSizeTemperatureFile
 0000003A  BA 000000A4 R	    MOV     EDX, OFFSET file_TempReadings
 0000003F  E8 00000000 E	    CALL    ReadFromFile




				    ;=================================
 00000044  68 0000063F R	    PUSH    OFFSET  arr_TempMatrix
 00000049  68 000000A4 R	    PUSH    OFFSET  file_TempReadings
 0000004E  E8 00000011		    CALL    ParseTempsFromString


				    ; Close File
 00000053  A1 00000000 R	    MOV     EAX, fileHandle               ; Load file handle
 00000058  E8 00000000 E	    CALL    CloseFile                      ; Close the file



					Invoke ExitProcess,0	; exit to operating system
 0000005D  6A 00	   *	    push   +000000000h
 0000005F  E8 00000000 E   *	    call   ExitProcess
 00000064			main ENDP



				; ==========================================================================================================================
				; Extracts temperature readings, in string delimited format, from memory. Then saves the readings in an arrary as integers
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 00000064			ParseTempsFromString PROC
				    LOCAL   str_CrntTemp[5]:BYTE, int_Len_Str_CrntTemp:DWORD, int_Sign:DWORD, int_RowIndex:DWORD, int_ColIndex:DWORD, int_CrntTemp:DWORD, int_PrevDlmterPos:DWORD, int_CrntDlmterPos:DWORD, offset_File_TempReadings:DWORD, int_LenMatrix:DWORD, int_WidthMatrix:DWORD

 00000064  55		   *	    push   ebp
 00000065  8B EC	   *	    mov    ebp, esp
 00000067  83 C4 D0	   *	    add    esp, 0FFFFFFD0h
 0000006A  50			    PUSH	EAX
 0000006B  53			    PUSH	EBX
 0000006C  51			    PUSH	ECX
 0000006D  52			    PUSH	EDX
 0000006E  56			    PUSH	ESI
 0000006F  57			    PUSH	EDI


				    ; Stack Layout:
				    ; [EBP + 12] = OFFSET arr_TempMatrix
				    ; [EBP + 8] = OFFSET file_TempReadings
				    ; [EBP + 4] = return address
				    ; [EBP] = old ebp

				    ; move parameter to local variable
 00000070  8B 45 08		    MOV     EAX, [EBP + 8]
 00000073  89 45 D8		    MOV     offset_File_TempReadings, EAX







				    ;==================================================================
				    ; Get File Size
 00000076  8D 45 D0		    LEA     EAX, int_WidthMatrix
 00000079  50			    PUSH    EAX
 0000007A  8D 45 D4		    LEA     EAX, int_LenMatrix
 0000007D  50			    PUSH    EAX
 0000007E  FF 75 D8		    PUSH    offset_File_TempReadings
 00000081  E8 000004A0		    CALL    Get_MatrixSize

 00000086  E8 00000000 E	    CALL    CrLf
 0000008B  BA 00000498 R	    MOV     EDX, OFFSET str_MsgNumberofRows
 00000090  E8 00000000 E	    CALL    WriteString
 00000095  8B 45 D4		    MOV     EAX, int_LenMatrix
 00000098  E8 00000000 E	    CALL    WriteDec

 0000009D  E8 00000000 E	    CALL    CrLf
 000000A2  BA 000004AD R	    MOV     EDX, OFFSET str_MsgNumberofColumns
 000000A7  E8 00000000 E	    CALL    WriteString
 000000AC  8B 45 D0		    MOV     EAX, int_WidthMatrix
 000000AF  E8 00000000 E	    CALL    WriteDec

				    ;==================================================================
				    ; Initialize outer loop (rows)
 000000B4  B8 00000000		    MOV     EAX, 0
 000000B9  89 45 EC		    MOV     int_RowIndex, EAX
 000000BC  B8 FFFFFFFF		    MOV     EAX, -1
 000000C1  89 45 E0		    MOV     int_PrevDlmterPos, EAX


				    ; Start outer loop (rows)
 000000C4			    _Loop_Rows:
				        ; Initialize inner loop (columns)
 000000C4  B8 00000000		        MOV     EAX, 0
 000000C9  89 45 E8		        MOV     int_ColIndex, EAX


				        ; Start inner loop (columns)
 000000CC			        _Loop_Columns:

 000000CC  E8 00000000 E	            CALL CrLf
 000000D1  BA 00000B93 R	            MOV EDX, OFFSET str_MsgRowIndex
 000000D6  E8 00000000 E	            CALL WriteString
 000000DB  8B 45 EC		            MOV EAX, int_RowIndex
 000000DE  E8 00000000 E	            CALL WriteDec

 000000E3  E8 00000000 E	            CALL CrLf
 000000E8  BA 00000B9F R	            MOV EDX, OFFSET str_MsgColIndex
 000000ED  E8 00000000 E	            CALL WriteString
 000000F2  8B 45 E8		            MOV EAX, int_ColIndex
 000000F5  E8 00000000 E	            CALL WriteDec

				            ;==================================================================
				            ; Get current delimiter position
				    
 000000FA  FF 75 D8		            PUSH    offset_File_TempReadings
 000000FD  8D 45 DC		            LEA     EAX, int_CrntDlmterPos
 00000100  50			            PUSH    EAX
				            ;MOV     EAX, -1                            ; Used for modular testing
				            ;MOV     int_PrevDlmterPos, EAX             ; Used for modular testing
 00000101  FF 75 E0		            PUSH    int_PrevDlmterPos
 00000104  E8 000003AB		            CALL    Get_NextDlmtrPos
				            ;!!!!! After current line is done, in the loop, need to add 2 to int_PrevDlmterPos to compensate for CrLf

				   
				           ;==================================================================
				           ; Get an iteration of Temp reading, save as string
 00000109  8B 45 D8		           MOV      EAX, offset_File_TempReadings
 0000010C  50			           PUSH     EAX
 0000010D  8D 45 FB		           LEA      EAX, str_CrntTemp
 00000110  50			           PUSH     EAX
 00000111  8B 45 E0		           MOV      EAX, int_PrevDlmterPos
 00000114  50			           PUSH     EAX
 00000115  8B 45 DC		           MOV      EAX, int_CrntDlmterPos
 00000118  50			           PUSH     EAX
 00000119  E8 000002F1		           CALL     Extract_StrCrntTemp
 0000011E  BA 0000051A R	           MOV      EDX, OFFSET str_MsgCurrentTempIteration
 00000123  E8 00000000 E	           CALL     CrLf
 00000128  E8 00000000 E	           CALL     WriteString
 0000012D  8D 55 FB		           LEA      EDX, str_CrntTemp
 00000130  E8 00000000 E	           CALL     WriteString


				           ;==================================================================
				           ; Detect the sign, store this info then removes the sign from the string
 00000135  8D 45 F0		            LEA      EAX, int_Sign
 00000138  50			            PUSH     EAX
 00000139  8D 45 FB		            LEA      EAX, str_CrntTemp
 0000013C  50			            PUSH     EAX
 0000013D  E8 0000025B		            CALL     GetSign
				            ; Debug Print
 00000142  E8 00000000 E	            CALL    CrLf
 00000147  BA 00000546 R	            MOV     EDX, OFFSET str_MsgSign
 0000014C  E8 00000000 E	            CALL    WriteString
 00000151  8B 45 F0		            MOV     EAX, int_Sign
 00000154  E8 00000000 E	            CALL    WriteDec
 00000159  E8 00000000 E	            CALL    CrLf     
 0000015E  BA 00000582 R	            MOV     EDX, OFFSET str_MsgSignRemoved
 00000163  E8 00000000 E	            CALL    WriteString
 00000168  8D 55 FB		            LEA     EDX, str_CrntTemp
 0000016B  E8 00000000 E	            CALL    WriteString
 00000170  E8 00000000 E	            CALL    CrLf


				    
				           ;==================================================================
				           ; Convert current Temp Reading to Integer

 00000175  8D 45 E4		            LEA     EAX, int_CrntTemp
 00000178  50			            PUSH    EAX
 00000179  8D 45 FB		            LEA     EAX, str_CrntTemp
 0000017C  50			            PUSH    EAX
 0000017D  E8 0000015C		            CALL    ConvertStringToInteger
				            ; Debugging printouts
 00000182  E8 00000000 E	            CALL    CrLf
 00000187  BA 000005C3 R	            MOV     EDX, OFFSET str_MsgConvertedInt
 0000018C  E8 00000000 E	            CALL    WriteString
 00000191  8B 45 E4		            MOV     EAX, int_CrntTemp
 00000194  E8 00000000 E	            CALL    WriteInt


				           ;==================================================================
				           ; Check if reference sign bit is set. 
				           ; If yes, negate the  stored integer Temp reading
				    
 00000199  8B 45 F0		            MOV     EAX, int_Sign
 0000019C  83 F8 01		            CMP     EAX, 1
 0000019F  75 09		            JNE     _Save_ToTempMatrix
 000001A1  8D 45 E4		            LEA     EAX, int_CrntTemp
 000001A4  50			            PUSH    EAX
 000001A5  E8 00000111		            CALL    Negate_CurntTemp


 000001AA			            _Save_ToTempMatrix:
				                ; Debugging printouts
 000001AA  E8 00000000 E	                CALL    CrLf
 000001AF  BA 000005E1 R	                MOV     EDX, OFFSET str_MsgAfterSignCheck
 000001B4  E8 00000000 E	                CALL    WriteString
 000001B9  8B 45 E4		                MOV     EAX, int_CrntTemp
 000001BC  E8 00000000 E	                CALL    WriteInt
 000001C1  E8 00000000 E	                CALL    CrLf
 000001C6  E8 00000000 E	                CALL    CrLf
				   
				               ;==================================================================
				               ; Save current Temp iteration to Matrix
				               ; If yes, negate the  stored integer Temp reading
				    
				                ; DEBUG PRINT: Print the address of arr_TempMatrix.
				                ;CALL    CrLf
				                ;MOV     EDX, OFFSET str_MsgAddressOfMatrix
				                ;CALL    WriteString
				                ;LEA     EAX, arr_TempMatrix
				                ;CALL    WriteDec
				                ;CALL    CrLf

				                ; Test Row and Col values
				                ;MOV     EAX, 1                         ; for modular testing only
				                ;MOV     int_RowIndex, EAX              ; for modular testing only
				                ;MOV     EAX, 0                         ; for modular testing only
				                ;MOV     int_ColIndex, EAX              ; for modular testing only
 000001CB  FF 75 D0		                PUSH    int_WidthMatrix
 000001CE  FF 75 0C		                PUSH    [EBP + 12]                      ; OFFSET arr_TempMatrix
 000001D1  FF 75 E8		                PUSH    int_ColIndex
 000001D4  FF 75 EC		                PUSH    int_RowIndex
 000001D7  FF 75 E4		                PUSH    int_CrntTemp
 000001DA  E8 00000081		                CALL    Save_CrntTemp_ToMatrix


				            ; Check if Inner Loop is done

				            ; ============================================
				            ; Print All Elements of arr_TempMatrix

 000001DF  8B 75 0C		            MOV     ESI, [EBP + 12]                                     ; Move To ESI: OFFSET arr_TempMatrix
 000001E2  B9 000000FA		            MOV     ECX, 250 ; Set loop counter (total elements)

 000001E7			            _PrintLoop:
 000001E7  8B 06		            MOV     EAX, [ESI]                  ; Load current array element
 000001E9  E8 00000000 E	            CALL    WriteInt                      ; Print number
 000001EE  B0 20		            MOV     AL, ' '
 000001F0  E8 00000000 E	            CALL    WriteChar                      ; Print space for separation

 000001F5  83 C6 04		            ADD     ESI, 4                          ; Move to next DWORD (4 bytes)
 000001F8  E2 ED		            LOOP    _PrintLoop                     ; Repeat until ECX = 0



 000001FA  8B 45 E8		            MOV     EAX, int_ColIndex
 000001FD  40			            INC     EAX
 000001FE  89 45 E8		            MOV     int_ColIndex, EAX
 00000201  3B 45 D0		            CMP     EAX, int_WidthMatrix
 00000204  73 0B		            JAE      _End_LoopColumns

				            ; Preapare for next inner loop iteration
 00000206  8B 45 DC		            MOV     EAX, int_CrntDlmterPos
 00000209  89 45 E0		            MOV     int_PrevDlmterPos, EAX
 0000020C  E9 FFFFFEBB		            JMP     _Loop_Columns


				            ; End inner loop
 00000211			            _End_LoopColumns:
 00000211  8B 45 DC		            MOV     EAX, int_CrntDlmterPos
 00000214  89 45 E0		            MOV     int_PrevDlmterPos, EAX
 00000217  8B 45 E0		            MOV     EAX, int_PrevDlmterPos
 0000021A  83 C0 02		            ADD     EAX, 2
 0000021D  89 45 E0		            MOV     int_PrevDlmterPos, EAX
				            
				        ; Check if Outer Loop is done  

 00000220  8B 45 EC		        MOV     EAX, int_RowIndex
 00000223  40			        INC     EAX
 00000224  89 45 EC		        MOV     int_RowIndex, EAX
 00000227  3B 45 D4		        CMP     EAX, int_LenMatrix
 0000022A  73 05		        JAE      _End_LoopRows

				        ; Prepare next Outer Loop iteration
 0000022C  E9 FFFFFE93		        JMP     _Loop_Rows

				        ; End Outer Loop
 00000231			        _End_LoopRows:


				    ; ============================================
				    ; Print All Elements of arr_TempMatrix
 00000231  E8 00000000 E	    CALL    CrLf
 00000236  E8 00000000 E	    CALL    CrLf

 0000023B  8B 75 0C		    MOV     ESI, [EBP + 12]                                     ; Move To ESI: OFFSET arr_TempMatrix
 0000023E  B9 000000FA		    MOV     ECX, 250 ; Set loop counter (total elements)

 00000243			    _PrintLoop2:
 00000243  8B 06		        MOV     EAX, [ESI]                  ; Load current array element
 00000245  E8 00000000 E	        CALL    WriteInt                      ; Print number
 0000024A  B0 20		        MOV     AL, ' '
 0000024C  E8 00000000 E	        CALL    WriteChar                      ; Print space for separation

 00000251  83 C6 04		        ADD     ESI, 4                          ; Move to next DWORD (4 bytes)
 00000254  E2 ED		        LOOP    _PrintLoop2                    ; Repeat until ECX = 0

				    ;   Cleanup then Finish Proc
 00000256  5F			    POP	    EDI
 00000257  5E			    POP 	ESI
 00000258  5A			    POP	    EDX
 00000259  59			    POP	    ECX
 0000025A  5B			    POP 	EBX
 0000025B  58			    POP	    EAX
 0000025C  C9		   *	    leave  
 0000025D  C2 0008		    RET     8

 00000260			ParseTempsFromString ENDP
Proj6_pereze4.asm(468) : warning A6004:procedure argument or local not referenced : int_Len_Str_CrntTemp

				; ==========================================================================================================================
				; Saves current Temp reading to array
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================

 00000260			Save_CrntTemp_ToMatrix PROC
				    LOCAL crntTemp:DWORD
				    LOCAL rowIndex:DWORD
				    LOCAL colIndex:DWORD
				    LOCAL offset_TempMatrixLoc:DWORD
				    LOCAL intWidthMatrix:DWORD
				    LOCAL elementIndex:DWORD
				    LOCAL byteOffset:DWORD
				    LOCAL destAddress:DWORD

 00000260  55		   *	    push   ebp
 00000261  8B EC	   *	    mov    ebp, esp
 00000263  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 00000266  50			    PUSH    EAX
 00000267  53			    PUSH    EBX
 00000268  51			    PUSH    ECX
 00000269  52			    PUSH    EDX
 0000026A  56			    PUSH    ESI
 0000026B  57			    PUSH    EDI

				    ;-------------------------------------------------------------------
				    ; PARAMETER HANDLING:
				    ; [EBP+8]  : int_CrntTemp       - the integer value to be saved.
				    ; [EBP+12] : int_RowIndex       - row index in the matrix.
				    ; [EBP+16] : int_ColIndex       - column index in the matrix.
				    ; [EBP+20] : offset_Arr_TempMatrix - pointer to the temperature matrix.
				    ; [EBP+24] : int_WidthMatrix    - matrix width (number of columns).
				    ;
				    ; Save parameters into local variables.
 0000026C  8B 45 08		    MOV     EAX, [EBP+8]
 0000026F  89 45 FC		    MOV     crntTemp, EAX

 00000272  8B 45 0C		    MOV     EAX, [EBP+12]
 00000275  89 45 F8		    MOV     rowIndex, EAX

 00000278  8B 45 10		    MOV     EAX, [EBP+16]
 0000027B  89 45 F4		    MOV     colIndex, EAX

 0000027E  8B 45 14		    MOV     EAX, [EBP+20]
 00000281  89 45 F0		    MOV     offset_TempMatrixLoc, EAX

 00000284  8B 45 18		    MOV     EAX, [EBP+24]
 00000287  89 45 EC		    MOV     intWidthMatrix, EAX

				    ;-------------------------------------------------------------------
				    ; DEBUG PRINT: Print parameters.
				    ; (These debug prints can be enabled as needed.)
				    ;MOV     EDX, OFFSET str_MsgCurrentTemp
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, crntTemp
				    ;CALL    WriteInt

				    ;MOV     EDX, OFFSET str_MsgRowIndex
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, rowIndex
				    ;CALL    WriteInt

				    ;MOV     EDX, OFFSET str_MsgColIndex
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, colIndex
				    ;CALL    WriteInt

				    ;MOV     EDX, OFFSET str_MsgMatrixPtr
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, offset_TempMatrixLoc
				    ;CALL    WriteDec

				    ;-------------------------------------------------------------------
				    ; COMPUTE ELEMENT OFFSET:
				    ; elementIndex = rowIndex * intWidthMatrix + colIndex
 0000028A  8B 45 F8		    MOV     EAX, rowIndex
 0000028D  0F AF 45 EC		    IMUL    EAX, intWidthMatrix       ; EAX = rowIndex * intWidthMatrix
 00000291  03 45 F4		    ADD     EAX, colIndex             ; EAX = element index
 00000294  89 45 E8		    MOV     elementIndex, EAX

				    ; Compute byteOffset = elementIndex * 4 (DWORD size)
 00000297  8B 45 E8		    MOV     EAX, elementIndex
 0000029A  C1 E0 02		    SHL     EAX, 2                    ; Multiply by 4.
 0000029D  89 45 E4		    MOV     byteOffset, EAX

				    ; Compute destination address = offset_TempMatrixLoc + byteOffset.
 000002A0  8B 45 F0		    MOV     EAX, offset_TempMatrixLoc
 000002A3  03 45 E4		    ADD     EAX, byteOffset
 000002A6  89 45 E0		    MOV     destAddress, EAX

				    ;-------------------------------------------------------------------
				    ; DEBUG PRINT: Print computed indices and address.
				    ;MOV     EDX, OFFSET str_MsgElementIndex
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, elementIndex
				    ;CALL    WriteInt

				    ;MOV     EDX, OFFSET str_MsgByteOffset
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, byteOffset
				    ;CALL    WriteInt

				    ;MOV     EDX, OFFSET str_MsgDestAddress
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, destAddress
				    ;CALL    WriteDec

				    ;-------------------------------------------------------------------
				    ; SAVE THE INTEGER INTO THE MATRIX:
				    ; Simply move the DWORD value from crntTemp to the computed destination.

 000002A9  8B 7D E0		    MOV     EDI, destAddress  ; Load address into EDI
 000002AC  8B 45 FC		    MOV     EAX, crntTemp     ; Load temperature value
 000002AF  89 07		    MOV     DWORD PTR [EDI], EAX  ; Store the value at the correct address


				    ;-------------------------------------------------------------------
				    ; DEBUG PRINT: Verify saved value by reading from the destination.
				    ;MOV     EDX, OFFSET str_MsgSavedInteger
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, crntTemp
				    ;CALL    WriteInt
				    ;CALL    CrLf





 000002B1  5F			    POP     EDI
 000002B2  5E			    POP     ESI
 000002B3  5A			    POP     EDX
 000002B4  59			    POP     ECX
 000002B5  5B			    POP     EBX
 000002B6  58			    POP     EAX
 000002B7  C9		   *	    leave  
 000002B8  C2 0014		    RET     20
 000002BB			Save_CrntTemp_ToMatrix ENDP



				; ==========================================================================================================================
				; Negates an unsigned Integer
				; receives: Address of the current Temperature reading, an integer
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 000002BB			Negate_CurntTemp PROC
				    LOCAL originalValue:DWORD, negatedValue:DWORD

 000002BB  55		   *	    push   ebp
 000002BC  8B EC	   *	    mov    ebp, esp
 000002BE  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000002C1  50			    PUSH    EAX
 000002C2  53			    PUSH    EBX

				    ;------------------------------------------------------------
				    ; PARAMETER HANDLING:
				    ; [EBP+8] : offset_Int_CurntTemp - pointer to the integer value to be negated.
				    ;------------------------------------------------------------
 000002C3  8B 45 08		    MOV     EAX, [EBP+8]                ; EAX = pointer to the integer.
 000002C6  8B 18		    MOV     EBX, [EAX]                  ; Load the original integer value.
 000002C8  89 5D FC		    MOV     originalValue, EBX


				    ;------------------------------------------------------------
				    ; DEBUG PRINT: Print original integer value (optional).
				    ; MOV     EDX, OFFSET str_MsgOriginal  ; "ORIGINAL VALUE: "
				    ; CALL    CrLf
				    ; CALL    WriteString
				    ; MOV     EAX, originalValue
				    ; CALL    WriteInt
				    ; CALL    CrLf

				    ;------------------------------------------------------------
				    ; NEGATE THE INTEGER:
 000002CB  8B 5D FC		    MOV     EBX, originalValue          ; Copy original value to EBX.
 000002CE  F7 DB		    NEG     EBX                         ; EBX = -originalValue.
 000002D0  89 5D F8		    MOV     negatedValue, EBX           ; Store the negated value in local variable.

				    ;------------------------------------------------------------
				    ; STORE THE NEGATED VALUE:
 000002D3  8B 45 08		    MOV     EAX, [EBP + 8]
 000002D6  89 18		    MOV     [EAX], EBX        ; Write negated value back to memory.

				    ;------------------------------------------------------------
				    ; DEBUG PRINT: Print negated integer value (optional).
				    ; MOV     EDX, OFFSET str_MsgNegated   ; "NEGATED VALUE: "
				    ; CALL    CrLf
				    ; CALL    WriteString
				    ; MOV     EAX, negatedValue
				    ; CALL    WriteInt
				    ; CALL    CrLf


 000002D8  5B			    POP     EBX
 000002D9  58			    POP     EAX
 000002DA  C9		   *	    leave  
 000002DB  C2 0004		    RET     4
 000002DE			Negate_CurntTemp ENDP




				; ==========================================================================================================================
				; Converts the current string Temperature reading to Integer
				; receives: Address of the current Temperature reading
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 000002DE			ConvertStringToInteger PROC
				    LOCAL offset_str_CrntTempLoc:DWORD
				    LOCAL len_str_CrntTemp:DWORD
				    LOCAL numInt:DWORD
				    LOCAL loopCount:DWORD

 000002DE  55		   *	    push   ebp
 000002DF  8B EC	   *	    mov    ebp, esp
 000002E1  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 000002E4  50			    PUSH    EAX
 000002E5  53			    PUSH    EBX
 000002E6  51			    PUSH    ECX
 000002E7  52			    PUSH    EDX
 000002E8  56			    PUSH    ESI
 000002E9  57			    PUSH    EDI

				    ;------------------------------------------------------------
				    ; PARAMETERS:
				    ; [EBP+12] : offset_Int_CurntTemp  - pointer where the converted integer will be stored.
				    ; [EBP+8]  : offset_str_CrntTemp - pointer to the ASCII string, null Terminated
				    ;
				    ; Store the string pointer in a local variable.
 000002EA  8B 45 08		    MOV     EAX, [EBP + 8]
 000002ED  89 45 FC		    MOV     offset_str_CrntTempLoc, EAX

				    ;------------------------------------------------------------

 000002F0  8B 55 08		    MOV     EDX, [EBP + 8]                  ; Load pointer into EDX
 000002F3  8B F2		        MOV     ESI, EDX         ; Copy pointer to ESI.
 000002F5  33 C9		        XOR     ECX, ECX         ; Clear ECX (counter = 0).

 000002F7			    L_strlen:
 000002F7  80 3E 00		        CMP     BYTE PTR [ESI], 0 ; Check if the current byte is 0 (null terminator).
 000002FA  74 04		        JE      L_done_strlen    ; If yes, jump to done.
 000002FC  41			        INC     ECX              ; Otherwise, increment counter.
 000002FD  46			        INC     ESI              ; Move pointer to the next character.
 000002FE  EB F7		        JMP     L_strlen         ; Loop again.

 00000300			    L_done_strlen:
 00000300  89 4D F8		        MOV     len_str_CrntTemp, ECX
 00000303  8B C1		        MOV     EAX, ECX         ; EAX now holds the string length.
				        ; Optionally: display the length.
 00000305  E8 00000000 E	        CALL    WriteDec
 0000030A  E8 00000000 E	        CALL    CrLf


				    ;------------------------------------------------------------
				    ; DEBUG PRINT: Print pointer value.
 0000030F  BA 00000AEF R	    MOV     EDX, OFFSET STR_MSGPOINTER          ; "POINTER VALUE: "
 00000314  E8 00000000 E	    CALL    CrLf
 00000319  E8 00000000 E	    CALL    WriteString
 0000031E  8B 45 FC		    MOV     EAX, offset_str_CrntTempLoc
 00000321  E8 00000000 E	    CALL    WriteDec
 00000326  E8 00000000 E	    CALL    CrLf

				    ; DEBUG PRINT: Print passed string.
 0000032B  BA 00000AFF R	    MOV     EDX, OFFSET STR_MSGPASSEDSTRING     ; "PASSED STRING: "
 00000330  E8 00000000 E	    CALL    CrLf
 00000335  E8 00000000 E	    CALL    WriteString
 0000033A  8B 55 FC		    MOV     EDX, offset_str_CrntTempLoc
 0000033D  E8 00000000 E	    CALL    WriteString
 00000342  E8 00000000 E	    CALL    CrLf

				    ; DEBUG PRINT: Print string length.
 00000347  BA 00000B54 R	    MOV     EDX, OFFSET STR_MSGLENGTH           ; "LENGTH: "
 0000034C  E8 00000000 E	    CALL    WriteString
 00000351  8B 45 F8		    MOV     EAX, len_str_CrntTemp
 00000354  E8 00000000 E	    CALL    WriteDec
 00000359  E8 00000000 E	    CALL    CrLf

				    ;------------------------------------------------------------
				    ; INITIALIZE THE RESULT INTEGER.
 0000035E  C7 45 F4		    MOV     numInt, 0
	   00000000

				    ;------------------------------------------------------------
				    ; SET UP POINTERS FOR CONVERSION:
				    ; Use ESI to point to the start of the string.
 00000365  8B 75 FC		    MOV     ESI, offset_str_CrntTempLoc
				    ; Use ECX as a counter, set to the length of the string.
 00000368  8B 4D F8		    MOV     ECX, len_str_CrntTemp


				    ;------------------------------------------------------------
				    ; CONVERSION LOOP:
				    ; For each character in the string, if it is between '0' and '9',
				    ; update numInt = 10 * numInt + (char - '0').
 0000036B			    _convert_loop:
 0000036B  AC			        LODSB                       ; Load byte from [ESI] into AL, ESI++, ECX--
 0000036C  3C 00		        CMP     AL, 0
 0000036E  74 1B		        JE      _end_convert_loop    ; If null terminator, end loop.
 00000370  3C 30		        CMP     AL, '0'
 00000372  72 17		        JB      _end_convert_loop    ; If char < '0', break.
 00000374  3C 39		        CMP     AL, '9'
 00000376  77 13		        JA      _end_convert_loop    ; If char > '9', break.
				        ; Convert character to digit.
 00000378  0F B6 C0		        MOVZX   EAX, AL             ; Zero-extend AL into EAX.
 0000037B  83 E8 30		        SUB     EAX, '0'            ; EAX = digit value.
				        ; Multiply current numInt by 10.
 0000037E  8B 5D F4		        MOV     EBX, numInt
 00000381  6B DB 0A		        IMUL    EBX, 10
 00000384  03 D8		        ADD     EBX, EAX            ; Add digit value.
 00000386  89 5D F4		        MOV     numInt, EBX         ; Update numInt.
 00000389  E2 E0		        LOOP    _convert_loop

				    ; end loop and store the converted integer value
 0000038B			    _end_convert_loop:
				        ;------------------------------------------------------------
				        ; DEBUG PRINT: Print the converted integer.
				        ; MOV     EDX, OFFSET STR_MSGCONVERTED   ; "CONVERTED INTEGER: "
				        ; CALL    CrLf
				        ; CALL    WriteString
				        ; MOV     EAX, numInt
				        ; CALL    WriteDec
				        ; CALL    CrLf

				        ;------------------------------------------------------------
				        ; STORE THE RESULT:
				        ; Save the converted integer at the memory location pointed to by offset_Int_CurntTemp.
 0000038B  8B 5D 0C		        MOV     EBX, [EBP+12]
 0000038E  8B 45 F4		        MOV     EAX, numInt
 00000391  89 03		        MOV     DWORD PTR [EBX], EAX

				    ;------------------------------------------------------------
				    ; RESTORE REGISTERS AND RETURN.
 00000393  5F			    POP     EDI
 00000394  5E			    POP     ESI
 00000395  5A			    POP     EDX
 00000396  59			    POP     ECX
 00000397  5B			    POP     EBX
 00000398  58			    POP     EAX
 00000399  C9		   *	    leave  
 0000039A  C2 0008		    RET     8
 0000039D			ConvertStringToInteger ENDP
Proj6_pereze4.asm(815) : warning A6004:procedure argument or local not referenced : loopCount




				; ==========================================================================================================================
				; Detects sign of the current temp reading saved as string. Removes the sign
				; receives: Address of the Temperature reading
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================

 0000039D			GetSign PROC
 0000039D  55			    PUSH    EBP
 0000039E  8B EC		    MOV     EBP, ESP
 000003A0  83 EC 04		    SUB     ESP, 4                ; Allocate 4 bytes for local variable (offset_str_CrntTempLoc)

 000003A3  57			    PUSH    EDI
 000003A4  56			    PUSH    ESI
 000003A5  52			    PUSH    EDX
 000003A6  51			    PUSH    ECX
 000003A7  53			    PUSH    EBX
 000003A8  50			    PUSH    EAX

				    ;------------------------------------------------------------
				    ; Parameter Handling:
				    ; [EBP+8]  : offset_str_CrntTemp - pointer to the string (e.g. "-15",0)
				    ; [EBP+12] : offset_Int_Sign      - pointer to the INT byte.
				    ;
				    ; Load the string pointer into EBX and store it in our local variable.
 000003A9  8B 5D 08		    MOV     EBX, [EBP+8]          ; EBX = pointer to passed string.
 000003AC  89 5D FC		    MOV     DWORD PTR [EBP-4], EBX  ; Store this pointer in local variable.

				    ;------------------------------------------------------------
				    ; Debug Print: Print pointer value.
				    ; MOV     EDX, OFFSET str_MsgPointer  ; "POINTER VALUE: "
				    ; CALL    CrLf
				    ; CALL    WriteString
				    ; MOV     EAX, EBX            ; Use EBX directly.
				    ; CALL    WriteDec
				    ; CALL    CrLf

				    ;------------------------------------------------------------
				    ; Debug Print: Print passed string.
				    ;MOV     EDX, OFFSET str_MsgPassedString  ; "PASSED STRING: "
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EDX, EBX
				    ;CALL    WriteString

				    ;------------------------------------------------------------
				    ; Read the first character from the string.
 000003AF  8B 45 FC		    MOV     EAX, [EBP-4]         ; Get stored pointer.
 000003B2  8A 00		    MOV     AL, BYTE PTR [EAX]   ; AL = first character.

				    ;------------------------------------------------------------
				    ; Debug Print: Print first character (as char and ASCII code).
				    ;MOV     EDX, OFFSET str_MsgFirstChar   ; "FIRST CHAR: "
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;CALL    WriteChar          ; Print character in AL.
				    ;CALL    CrLf
				    ;MOVZX   EAX, AL            ; Zero-extend AL.
				    ;MOV     EDX, OFFSET str_MsgASCII   ; " ASCII: "
				    ;CALL    WriteString
				    ;CALL    WriteDec           ; Print ASCII code.
				    ;CALL    CrLf

				    ;------------------------------------------------------------
				    ; Determine sign based solely on the first character.
 000003B4  3C 2D		    CMP     AL, '-'            ; If first character is '-'
 000003B6  74 17		    JE      setNegative
 000003B8  3C 2B		    CMP     AL, '+'            ; If first character is '+'
 000003BA  74 1E		    JE      setPositive
 000003BC  3C 30		    CMP     AL, '0'
 000003BE  72 04		    JB      defaultPositive    ; If not a digit, default positive.
 000003C0  3C 39		    CMP     AL, '9'
 000003C2  77 00		    JA      defaultPositive    ; If not a digit, default positive.

 000003C4			defaultPositive:
				    ; First character is a digit; treat as positive.
 000003C4  8B 5D 0C		    MOV     EBX, [EBP+12]       ; Load pointer to int_Sign byte.
 000003C7  C7 03 00000000	    MOV     DWORD PTR [EBX], 0   ; Set int_Sign to 0 (positive).
 000003CD  EB 34		    JMP     printSign

 000003CF			setNegative:
				    ; First character is '-' sign.
 000003CF  8B 5D 0C		    MOV     EBX, [EBP+12]       ; Load pointer to int_Sign byte.
 000003D2  C7 03 00000001	    MOV     DWORD PTR [EBX], 1   ; Set int_Sign to 1 (negative).
 000003D8  EB 0B		    JMP     shiftString

 000003DA			setPositive:
				    ; First character is '+' sign.
 000003DA  8B 5D 0C		    MOV     EBX, [EBP+12]       ; Load pointer to int_Sign byte.
 000003DD  C7 03 00000000	    MOV     DWORD PTR [EBX], 0   ; Set int_Sign to 0 (positive).
 000003E3  EB 00		    JMP     shiftString

				    ;------------------------------------------------------------
 000003E5			shiftString:
				    ; Debug Print: Indicate that the string is being shifted.
				    ;MOV     EDX, OFFSET str_MsgShifting  ; "SHIFTING STRING..."
				    ;CALL    CrLf
				    ;CALL    WriteString

				    ; Shift the string left by one byte (remove the sign).
				    ; Use the local variable stored at [EBP-4] as the pointer.
 000003E5  8B 45 FC		    MOV     EAX, [EBP-4]        ; EAX = original string pointer.
 000003E8  83 C0 01		    ADD     EAX, 1              ; Point to the second character.
 000003EB  8B F0		    MOV     ESI, EAX            ; Source pointer = string + 1.
 000003ED  8B 45 FC		    MOV     EAX, [EBP-4]        ; Get original pointer again.
 000003F0  8B F8		    MOV     EDI, EAX            ; Destination pointer = original string pointer.
 000003F2  FC			    CLD                         ; Clear direction flag.
 000003F3			shift_loop:
 000003F3  AC			    LODSB                       ; Load byte from source (ESI) into AL; increments ESI.
 000003F4  AA			    STOSB                       ; Store byte in AL into destination (EDI); increments EDI.
 000003F5  3C 00		    CMP     AL, 0               ; Check for null terminator.
 000003F7  75 FA		    JNE     shift_loop
				    ; Debug Print: Print shifted string.
 000003F9  BA 00000B38 R	    MOV     EDX, OFFSET str_MsgShiftedString  ; "SHIFTED STRING: "
				    ;CALL    CrLf
				    ;CALL    WriteString
 000003FE  8B 55 FC		    MOV     EDX, [EBP-4]        ; Local variable still holds original pointer.
				    ;CALL    WriteString
 00000401  EB 00		    JMP     printSign

				    ;------------------------------------------------------------
 00000403			printSign:
				    ; Debug Print: Print the obtained int_Sign value.
				    ;MOV     EDX, OFFSET str_MsgIntSign  ; "INT SIGN: "
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, [EBP+12]       ; Load pointer to int_Sign byte.
				    ;MOVZX   EAX, BYTE PTR [EAX] ; Get the sign value.
				    ;CALL    WriteDec            ; Print the sign value.
				    ;CALL    CrLf

				    ;------------------------------------------------------------
 00000403			done:
 00000403  58			    POP     EAX
 00000404  5B			    POP     EBX
 00000405  59			    POP     ECX
 00000406  5A			    POP     EDX
 00000407  5E			    POP     ESI
 00000408  5F			    POP     EDI
 00000409  8B E5		    MOV     ESP, EBP
 0000040B  5D			    POP     EBP
 0000040C  C2 0008		    RET     8
 0000040F			GetSign ENDP



				; ==========================================================================================================================
				; Extracts a temperature reading, in string delimited format, from memory. 
				; receives: Address of the Temperature array
				; returns:
				; preconditions: passed address references of array
				; postconditions: values saved in array
				; registers changed: none
				; ==========================================================================================================================
 0000040F			Extract_StrCrntTemp PROC
				    ;-------------------------------------------------------------------
				    ; Local Variables:
				    ;   prev_DlmterPos      - stores the parameter int_Prev_DlmterPos (previous delimiter index)
				    ;   crnt_DlmterPos      - stores the parameter int_CrntDlmterPos (current delimiter index)
				    ;   file_TempReadingsLoc- stores the parameter offset_File_TempReadings (file buffer base address)
				    ;   startPos            - computed starting index for extraction (prev_DlmterPos + 1)
				    ;   stringLength        - length of the substring to extract (crnt_DlmterPos - startPos)
				    LOCAL prev_DlmterPos:DWORD
				    LOCAL crnt_DlmterPos:DWORD
				    LOCAL file_TempReadingsLoc:DWORD
				    LOCAL startPos:DWORD
				    LOCAL stringLength:DWORD

 0000040F  55		   *	    push   ebp
 00000410  8B EC	   *	    mov    ebp, esp
 00000412  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 00000415  50			    PUSH    EAX
 00000416  53			    PUSH    EBX
 00000417  51			    PUSH    ECX
 00000418  52			    PUSH    EDX
 00000419  56			    PUSH    ESI
 0000041A  57			    PUSH    EDI

				    ;-------------------------------------------------------------------
				    ; Parameter Handling:
				    ; Parameters (from caller):
				    ;   [EBP+8]  : int_CrntDlmterPos   - current delimiter index.
				    ;   [EBP+12] : int_Prev_DlmterPos    - previous delimiter index.
				    ;   [EBP+16] : offset_str_CrntTemp  - destination address for the extracted string.
				    ;   [EBP+20] : offset_File_TempReadings - file buffer address.
				    ;
				    ; Load parameters into local variables with the updated order.
 0000041B  8B 45 0C		    MOV     EAX, [EBP+12]
 0000041E  89 45 FC		    MOV     prev_DlmterPos, EAX          ; Save previous delimiter position.
 00000421  8B 45 08		    MOV     EAX, [EBP+8]
 00000424  89 45 F8		    MOV     crnt_DlmterPos, EAX          ; Save current delimiter position.
 00000427  8B 45 14		    MOV     EAX, [EBP+20]
 0000042A  89 45 F4		    MOV     file_TempReadingsLoc, EAX   ; Save file buffer base address.


				    ; Debugging Messages
 0000042D  BA 00000508 R	    MOV     EDX, OFFSET str_MsgLoadedFile
 00000432  E8 00000000 E	    CALL    CrLf
 00000437  E8 00000000 E	    CALL    CrLf
 0000043C  E8 00000000 E	    CALL    WriteString
 00000441  8B 55 F4		    MOV     EDX, file_TempReadingsLoc
 00000444  E8 00000000 E	    CALL    CrLf
 00000449  E8 00000000 E	    CALL    WriteString


 0000044E  BA 000004C5 R	    MOV     EDX, OFFSET str_MsgPrevDlmtrPos
 00000453  E8 00000000 E	    CALL    CrLf
 00000458  E8 00000000 E	    CALL    WriteString
 0000045D  8B 45 FC		    MOV     EAX, prev_DlmterPos
 00000460  E8 00000000 E	    CALL    WriteInt

 00000465  BA 000004E7 R	    MOV     EDX, OFFSET str_MsgCrntDlmtrPos
 0000046A  E8 00000000 E	    CALL    CrLf
 0000046F  E8 00000000 E	    CALL    WriteString
 00000474  8B 45 F8		    MOV     EAX, crnt_DlmterPos
 00000477  E8 00000000 E	    CALL    WriteInt


				    ;-------------------------------------------------------------------
				    ; Compute the Starting Position for Extraction:
				    ; startPos = prev_DlmterPos + 1  (skip the previous delimiter)
 0000047C  8B 45 FC		    MOV     EAX, prev_DlmterPos
 0000047F  83 C0 01		    ADD     EAX, 1                     ; Advance one position past previous delimiter.
 00000482  89 45 F0		    MOV     startPos, EAX              ; Save computed starting index.

				    ;-------------------------------------------------------------------
				    ; Compute the Length of the Substring to Extract:
				    ; stringLength = crnt_DlmterPos - startPos
 00000485  8B 45 F8		    MOV     EAX, crnt_DlmterPos
 00000488  2B 45 F0		    SUB     EAX, startPos              ; Compute number of characters to copy.
 0000048B  89 45 EC		    MOV     stringLength, EAX          ; Save the computed string length.

				    ;-------------------------------------------------------------------
				    ; Debug Prints (Optional):
				    ; Display file buffer base address, start position, and string length.
				    ;MOV     EAX, file_TempReadingsLoc
				    ;CALL    CrLf
				    ;CALL    WriteDec
				    ;CALL    CrLf

 0000048E  8B 45 F0		    MOV     EAX, startPos
				    ;CALL    WriteDec
				    ;CALL    CrLf

 00000491  8B 45 EC		    MOV     EAX, stringLength
				    ;CALL    WriteDec
				    ;CALL    CrLf

				    ;-------------------------------------------------------------------
				    ; Check for non-positive string length (i.e. negative or zero length).
				    ; CMP     stringLength, 0
				    ; JLE     SkipCopy

				    ;-------------------------------------------------------------------
				    ; Set Up Source and Destination Pointers for Copy:
				    ; Source pointer = file_TempReadingsLoc + startPos
 00000494  8B 45 F4		    MOV     EAX, file_TempReadingsLoc
 00000497  03 45 F0		    ADD     EAX, startPos              ; Compute effective source address.
 0000049A  8B F0		    MOV     ESI, EAX                   ; ESI now points to the substring in the file buffer.
				    ;
				    ; Destination pointer = offset_str_CrntTemp (passed as parameter at [EBP+16])
 0000049C  8B 45 10		    MOV     EAX, [EBP+16]
 0000049F  8B F8		    MOV     EDI, EAX                   ; EDI points to the destination buffer.

				    ;-------------------------------------------------------------------
				    ; Copy the Substring Using REP MOVSB:
				    ; Clear the Direction Flag to ensure auto-increment.
 000004A1  FC			    CLD
				    ; Set ECX = stringLength (number of bytes to copy).
 000004A2  8B 4D EC		    MOV     ECX, stringLength
 000004A5  F3/ A4		    REP     MOVSB                    ; Copy ECX bytes from DS:ESI to ES:EDI.

				    ;SkipCopy:
				        ;-------------------------------------------------------------------
				        ; Append the NULL Terminator:
 000004A7  B0 00		        MOV     AL, 0                     ; Prepare NULL in AL.
 000004A9  AA			        STOSB                             ; Store AL at destination and increment EDI.

				        ; Debugging messages
				        ;MOV     EDX, [EBP+16]
				        ;CALL    CrLF
				        ;CALL    CrLf
				        ;CALL    WriteString

				    ;-------------------------------------------------------------------
				    ; Restore Registers and Return:
 000004AA  5F			    POP     EDI
 000004AB  5E			    POP     ESI
 000004AC  5A			    POP     EDX
 000004AD  59			    POP     ECX
 000004AE  5B			    POP     EBX
 000004AF  58			    POP     EAX
 000004B0  C9		   *	    leave  
 000004B1  C2 0010		    RET     16                        ; Clean up 20 bytes (4 parameters) from the stack.
 000004B4			Extract_StrCrntTemp ENDP




				; ==========================================================================================================================
				; Searches for the next delimiter in the file buffer
				; receives: Address of the buffered file, offset of the matrix Length and Width placeholder
				; returns:
				; preconditions: passed address offsets
				; postconditions: values saved in memory
				; registers changed: none
				; ==========================================================================================================================
 000004B4			Get_NextDlmtrPos PROC
				    LOCAL crntDlmtrPos:DWORD
				    LOCAL prevDlmterPos:DWORD
				    LOCAL offset_File_TempReadingsLoc:DWORD

 000004B4  55		   *	    push   ebp
 000004B5  8B EC	   *	    mov    ebp, esp
 000004B7  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000004BA  50			    PUSH    EAX
 000004BB  53			    PUSH    EBX
 000004BC  51			    PUSH    ECX
 000004BD  52			    PUSH    EDX
 000004BE  56			    PUSH    ESI
 000004BF  57			    PUSH    EDI

				    ; Parameters:
				    ;   [EBP+8]  : int_PrevDlmterPos
				    ;              (DWORD) The index of the previous delimiter in the current row.
				    ;   [EBP+12] : offset_Int_CrntDlmtrPos
				    ;              (DWORD) The address in memory where the result (the current delimiter index) will be saved.
				    ;   [EBP+16] : offset_File_TempReadings
				    ;              (DWORD) The address of the file saved in memory buffer (Temperature readings).

				    ; Store passed parameters in local variables.
 000004C0  8B 45 08		    MOV     EAX, [EBP+8]  
 000004C3  89 45 F8		    MOV     prevDlmterPos, EAX                ; Save previous delimiter position.

				    ; Debugging messages
				    ;MOV     EDX, OFFSET str_MsgPrevDlmtrPos
				    ;CALL    CrLf
				    ;CALL    WriteString
				    ;MOV     EAX, prevDlmterPos
				    ;CALL    WriteInt

 000004C6  8B 45 10		    MOV     EAX, [EBP+16]
 000004C9  89 45 F4		    MOV     offset_File_TempReadingsLoc, EAX  ; Save file buffer base address.


				    ; Debugging messages
				    ;MOV     EDX, OFFSET str_MsgLoadedFile
				    ;CALL    CrLF
				    ;CALL    WriteString
				    ;MOV     EDX, offset_File_TempReadingsLoc
				    ;CALL    CrLF
				    ;CALL    WriteString

				    ; Compute starting address for search:
				    ; Start searching at (prevDlmterPos + 1) relative to the file buffer.
 000004CC  8B 45 F8		    MOV     EAX, prevDlmterPos
 000004CF  83 C0 01		    ADD     EAX, 1                                      ; Next search index.
 000004D2  8B 5D F4		    MOV     EBX, offset_File_TempReadingsLoc            ; Load base address.
 000004D5  03 D8		    ADD     EBX, EAX                                    ; EBX now points to the search start position.
 000004D7  8B F3		    MOV     ESI, EBX                                    ; Set ESI to the starting search pointer.

				    ; Search for next delimiter value in the file
 000004D9			    _searchLoop2:
 000004D9  AC			        LODSB                                           ; Load byte at [ESI] into AL; ESI increments automatically.
 000004DA  3C 2C		        CMP     AL, DELIMITER                           ; Compare byte with the delimiter
 000004DC  74 02		        JE      _found_Dlmtr
 000004DE  EB F9		        JMP     _searchLoop2                            ; Continue scanning

				    ; Jump here once the next delimiter is found
 000004E0			    _found_Dlmtr:
				        ; ESI now points one byte past the found delimiter.
 000004E0  8B C6		        MOV     EAX, ESI
 000004E2  48			        DEC     EAX                                     ; Adjust: EAX now points to the delimiter itself.
 000004E3  89 45 FC		        MOV     crntDlmtrPos, EAX                       ; Store current delimiter absolute position.

				        ; Calculate the delimiter's index relative to the file buffer.
 000004E6  8B 4D F4		        MOV     ECX, offset_File_TempReadingsLoc        ; Base address.
 000004E9  29 4D FC		        SUB     crntDlmtrPos, ECX                       ; crntDlmtrPos now holds the index.


				        ; Check for CRLF between previous delimiter and current delimiter.
				        ; Scan from (prevDlmterPos + 1) up to the found delimiter index.
 000004EC  8B 45 F8		        MOV     EAX, prevDlmterPos
 000004EF  83 C0 01		        ADD     EAX, 1                                  ; Starting index for scan.
 000004F2  8B 5D FC		        MOV     EBX, crntDlmtrPos                       ; EBX holds current delimiter index.
 000004F5  8B F8		        MOV     EDI, EAX                                ; EDI is our scanning index.

 000004F7			    _adjustLoop:
 000004F7  3B FB		        CMP     EDI, EBX
 000004F9  7D 19		        JGE     _doneAdjust                             ; If scanning index >= current delimiter index, finish.
 000004FB  8A 44 3D F4		        MOV     AL, BYTE PTR [offset_File_TempReadingsLoc + EDI]
 000004FF  3C 0D		        CMP     AL, 0Dh
 00000501  74 03		        JE      _checkLF
 00000503  47			        INC     EDI
 00000504  EB F1		        JMP     _adjustLoop

 00000506			    _checkLF:
 00000506  80 7C 3D F5 0A	        CMP     BYTE PTR [offset_File_TempReadingsLoc + EDI + 1], 0Ah
 0000050B  74 03		        JE      _foundCRLF
 0000050D  47			        INC     EDI
 0000050E  EB E7		        JMP     _adjustLoop

 00000510			    _foundCRLF:
 00000510  83 45 FC 02		        ADD     crntDlmtrPos, 2            ; Adjust current delimiter index by adding 2.


 00000514			    _doneAdjust:
				        ; Save the result in the memory location pointed to by offset_Int_CrntDlmtrPos.
 00000514  8B 45 FC		        MOV     EAX, crntDlmtrPos
 00000517  8B 55 0C		        MOV     EDX, [EBP+12]
 0000051A  89 02		        MOV     [EDX], EAX

				        ; Debug printouts:
				        ;MOV     EDX, OFFSET str_MsgCrntDlmtrPos
				        ;CALL    CrLf
				        ;CALL    WriteString
				        ;CALL    WriteDec


 0000051C  5F			        POP     EDI
 0000051D  5E			        POP     ESI
 0000051E  5A			        POP     EDX
 0000051F  59			        POP     ECX
 00000520  5B			        POP     EBX
 00000521  58			        POP     EAX
 00000522  C9		   *	    leave  
 00000523  C2 000C		        RET     12
 00000526			Get_NextDlmtrPos ENDP




				; ==========================================================================================================================
				; Gathers the Length and Width og the matrix
				; receives: Address of the buffered file, offset of the matrix Length and Width placeholder
				; returns:
				; preconditions: passed address offsets
				; postconditions: values saved in memory
				; registers changed: none
				; ==========================================================================================================================
 00000526			Get_MatrixSize PROC

				    LOCAL int_NumRows:DWORD
				    LOCAL int_NumCols:DWORD
				    LOCAL offset_File_TempReadings:DWORD
				    LOCAL rowHasData:BYTE

 00000526  55		   *	    push   ebp
 00000527  8B EC	   *	    mov    ebp, esp
 00000529  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 0000052C  50			    PUSH    EAX
 0000052D  53			    PUSH    EBX
 0000052E  51			    PUSH    ECX
 0000052F  52			    PUSH    EDX
 00000530  56			    PUSH    ESI
 00000531  57			    PUSH    EDI


				    ; Parameters
				    ; [EBP + 16] int_WidthMatrix
				    ; [EBP + 12] int_LenMatrix
				    ; [EBP + 8]  offset_File_TempReadings

				    ; Load file address into ESI
 00000532  8B 45 08		    MOV     EAX, [EBP + 8]
 00000535  89 45 F4		    MOV     offset_File_TempReadings, EAX
 00000538  8B 75 F4		    MOV     ESI, offset_File_TempReadings       ; Had to abandon use of local variable, use ESI instead to make use of LODSB

				    ; Initialize counters and flag
 0000053B  C7 45 FC		    MOV     int_NumRows, 0
	   00000000
 00000542  C7 45 F8		    MOV     int_NumCols, 0                      ; Column count is based on delimiters (+ 1 if non-empty)
	   00000000
 00000549  C6 45 F3 00		    MOV     rowHasData, 0

				    ; ----------------------------------------------------------------
				    ; Process the first row: count columns and check for non-empty line
 0000054D			    _countCols:
 0000054D  AC			        LODSB                                   ; Load next byte from [ESI] into AL and increment ESI
 0000054E  8A D8		        MOV     BL, AL                          ; Save the character in BL

 00000550  80 FB 00		        CMP     BL, 0                           ; End-of-file?
 00000553  74 49		        JE      _end_Get_MatrixSize

 00000555  80 FB 0D		        CMP     BL, 0Dh                          ; Skip CR (Carriage Return)
 00000558  74 F3		        JE      _countCols

 0000055A  80 FB 0A		        CMP     BL, 0Ah                     ; LF indicates end-of-line
 0000055D  74 10		        JE      _finishFirstRow

				        ; Non CR/LF character: mark the row as non-empty
 0000055F  C6 45 F3 01		        MOV     rowHasData, 1

 00000563  80 FB 2C		        CMP     BL, DELIMITER                     ; Check for delimiter
 00000566  75 03		        JNE     _continueCols
 00000568  FF 45 F8		        INC     int_NumCols

				    ; Jump here if encountered delimiter
 0000056B			    _continueCols:
 0000056B  8A C3		        MOV     AL, BL
 0000056D  EB DE		        JMP     _countCols

				    ; At the end of the first row, count it if it contains data.
 0000056F			    _finishFirstRow:

 0000056F  80 7D F3 01		    CMP     rowHasData, 1
 00000573  75 03		    JNE     _skipFirstRow
 00000575  FF 45 FC		    INC     int_NumRows

				    ; Assume file has at least one row
 00000578			    _skipFirstRow:
 00000578  C6 45 F3 00		        MOV     rowHasData, 0               ; Reset flag for next row


				    ; Process subsequent rows
 0000057C			    _countRows:
 0000057C  AC			        LODSB                               ; Load next byte
 0000057D  3C 00		        CMP     AL, 0                       ; End-of-file?
 0000057F  74 1D		        JE      _end_Get_MatrixSize
 00000581  3C 0D		        CMP     AL, 0Dh                     ; Skip CR (Carriage Return)
 00000583  74 F7		        JE      _countRows
 00000585  3C 0A		        CMP     AL, 0Ah                     ; LF indicates end-of-line
 00000587  74 06		        JE      _endOfRow
				        ; Non CR/LF character: mark the row as non-empty
 00000589  C6 45 F3 01		        MOV     rowHasData, 1
 0000058D  EB ED		        JMP     _countRows

				    ; At the end of a row, count it if it contains data.
 0000058F			    _endOfRow:
 0000058F  80 7D F3 01		    CMP     rowHasData, 1
 00000593  75 03		    JNE     _resetRow
 00000595  FF 45 FC		    INC     int_NumRows

				    ; Reset flag for the next row
 00000598			    _resetRow:
 00000598  C6 45 F3 00		        MOV     rowHasData, 0       
 0000059C  EB DE		        JMP     _countRows

				     
				    ; check if final row has data
 0000059E			    _end_Get_MatrixSize:
 0000059E  80 7D F3 01		    CMP     rowHasData, 1
 000005A2  74 02		    JE      _addFinalRow
 000005A4  EB 05		    JMP    _storeCounts 


				    ; Jump here if final Row has data to count it
 000005A6			    _addFinalRow:
 000005A6  FF 45 FC		        INC     int_NumRows
 000005A9  EB 00		        JMP     _storeCounts

				    ; Store the row and column counts in the provided output addresses.
 000005AB			    _storeCounts:

 000005AB  8B 45 FC		    MOV     EAX, int_NumRows
 000005AE  8B 7D 0C		    MOV     EDI, [EBP + 12]
 000005B1  89 07		    MOV     DWORD PTR [EDI], EAX

 000005B3  8B 45 F8		    MOV     EAX, int_NumCols
 000005B6  8B 7D 10		    MOV     EDI, [EBP + 16]
 000005B9  89 07		    MOV     DWORD PTR [EDI], EAX

 000005BB  5F			    POP     EDI
 000005BC  5E			    POP     ESI
 000005BD  5A			    POP     EDX
 000005BE  59			    POP     ECX
 000005BF  5B			    POP     EBX
 000005C0  58			    POP     EAX
 000005C1  C9		   *	    leave  
 000005C2  C2 000C		    RET     12

 000005C5			Get_MatrixSize ENDP






				END main
Microsoft (R) Macro Assembler Version 14.29.30158.0	    03/15/25 07:41:50
*Temp List Reverser     (Proj6_pereze4.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayChar . . . . . . . . . .	Proc
mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000BFC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005C5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConvertStringToInteger . . . . .	P Near	 000002DE _TEXT	Length= 000000BF Public STDCALL
  offset_str_CrntTempLoc . . . .	DWord	 bp - 00000004
  len_str_CrntTemp . . . . . . .	DWord	 bp - 00000008
  numInt . . . . . . . . . . . .	DWord	 bp - 0000000C
  loopCount  . . . . . . . . . .	DWord	 bp - 00000010
  L_strlen . . . . . . . . . . .	L Near	 000002F7 _TEXT	
  L_done_strlen  . . . . . . . .	L Near	 00000300 _TEXT	
  _convert_loop  . . . . . . . .	L Near	 0000036B _TEXT	
  _end_convert_loop  . . . . . .	L Near	 0000038B _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Extract_StrCrntTemp  . . . . . .	P Near	 0000040F _TEXT	Length= 000000A5 Public STDCALL
  prev_DlmterPos . . . . . . . .	DWord	 bp - 00000004
  crnt_DlmterPos . . . . . . . .	DWord	 bp - 00000008
  file_TempReadingsLoc . . . . .	DWord	 bp - 0000000C
  startPos . . . . . . . . . . .	DWord	 bp - 00000010
  stringLength . . . . . . . . .	DWord	 bp - 00000014
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSign  . . . . . . . . . . . .	P Near	 0000039D _TEXT	Length= 00000072 Public STDCALL
  defaultPositive  . . . . . . .	L Near	 000003C4 _TEXT	
  setNegative  . . . . . . . . .	L Near	 000003CF _TEXT	
  setPositive  . . . . . . . . .	L Near	 000003DA _TEXT	
  shiftString  . . . . . . . . .	L Near	 000003E5 _TEXT	
  shift_loop . . . . . . . . . .	L Near	 000003F3 _TEXT	
  printSign  . . . . . . . . . .	L Near	 00000403 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000403 _TEXT	
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Get_MatrixSize . . . . . . . . .	P Near	 00000526 _TEXT	Length= 0000009F Public STDCALL
  int_NumRows  . . . . . . . . .	DWord	 bp - 00000004
  int_NumCols  . . . . . . . . .	DWord	 bp - 00000008
  offset_File_TempReadings . . .	DWord	 bp - 0000000C
  rowHasData . . . . . . . . . .	Byte	 bp - 0000000D
  _countCols . . . . . . . . . .	L Near	 0000054D _TEXT	
  _continueCols  . . . . . . . .	L Near	 0000056B _TEXT	
  _finishFirstRow  . . . . . . .	L Near	 0000056F _TEXT	
  _skipFirstRow  . . . . . . . .	L Near	 00000578 _TEXT	
  _countRows . . . . . . . . . .	L Near	 0000057C _TEXT	
  _endOfRow  . . . . . . . . . .	L Near	 0000058F _TEXT	
  _resetRow  . . . . . . . . . .	L Near	 00000598 _TEXT	
  _end_Get_MatrixSize  . . . . .	L Near	 0000059E _TEXT	
  _addFinalRow . . . . . . . . .	L Near	 000005A6 _TEXT	
  _storeCounts . . . . . . . . .	L Near	 000005AB _TEXT	
Get_NextDlmtrPos . . . . . . . .	P Near	 000004B4 _TEXT	Length= 00000072 Public STDCALL
  crntDlmtrPos . . . . . . . . .	DWord	 bp - 00000004
  prevDlmterPos  . . . . . . . .	DWord	 bp - 00000008
  offset_File_TempReadingsLoc  .	DWord	 bp - 0000000C
  _searchLoop2 . . . . . . . . .	L Near	 000004D9 _TEXT	
  _found_Dlmtr . . . . . . . . .	L Near	 000004E0 _TEXT	
  _adjustLoop  . . . . . . . . .	L Near	 000004F7 _TEXT	
  _checkLF . . . . . . . . . . .	L Near	 00000506 _TEXT	
  _foundCRLF . . . . . . . . . .	L Near	 00000510 _TEXT	
  _doneAdjust  . . . . . . . . .	L Near	 00000514 _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Negate_CurntTemp . . . . . . . .	P Near	 000002BB _TEXT	Length= 00000023 Public STDCALL
  originalValue  . . . . . . . .	DWord	 bp - 00000004
  negatedValue . . . . . . . . .	DWord	 bp - 00000008
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseTempsFromString . . . . . .	P Near	 00000064 _TEXT	Length= 000001FC Public STDCALL
  str_CrntTemp . . . . . . . . .	Byte	 bp - 00000005
  int_Len_Str_CrntTemp . . . . .	DWord	 bp - 0000000C
  int_Sign . . . . . . . . . . .	DWord	 bp - 00000010
  int_RowIndex . . . . . . . . .	DWord	 bp - 00000014
  int_ColIndex . . . . . . . . .	DWord	 bp - 00000018
  int_CrntTemp . . . . . . . . .	DWord	 bp - 0000001C
  int_PrevDlmterPos  . . . . . .	DWord	 bp - 00000020
  int_CrntDlmterPos  . . . . . .	DWord	 bp - 00000024
  offset_File_TempReadings . . .	DWord	 bp - 00000028
  int_LenMatrix  . . . . . . . .	DWord	 bp - 0000002C
  int_WidthMatrix  . . . . . . .	DWord	 bp - 00000030
  _Loop_Rows . . . . . . . . . .	L Near	 000000C4 _TEXT	
  _Loop_Columns  . . . . . . . .	L Near	 000000CC _TEXT	
  _Save_ToTempMatrix . . . . . .	L Near	 000001AA _TEXT	
  _PrintLoop . . . . . . . . . .	L Near	 000001E7 _TEXT	
  _End_LoopColumns . . . . . . .	L Near	 00000211 _TEXT	
  _End_LoopRows  . . . . . . . .	L Near	 00000231 _TEXT	
  _PrintLoop2  . . . . . . . . .	L Near	 00000243 _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Save_CrntTemp_ToMatrix . . . . .	P Near	 00000260 _TEXT	Length= 0000005B Public STDCALL
  crntTemp . . . . . . . . . . .	DWord	 bp - 00000004
  rowIndex . . . . . . . . . . .	DWord	 bp - 00000008
  colIndex . . . . . . . . . . .	DWord	 bp - 0000000C
  offset_TempMatrixLoc . . . . .	DWord	 bp - 00000010
  intWidthMatrix . . . . . . . .	DWord	 bp - 00000014
  elementIndex . . . . . . . . .	DWord	 bp - 00000018
  byteOffset . . . . . . . . . .	DWord	 bp - 0000001C
  destAddress  . . . . . . . . .	DWord	 bp - 00000020
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000064 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DELIMITER  . . . . . . . . . . .	Number	 0000002Ch   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STR_MSGASCII . . . . . . . . . .	Byte	 00000B1C _DATA	
STR_MSGCONVERTED . . . . . . . .	Byte	 00000B70 _DATA	
STR_MSGCONVERTING  . . . . . . .	Byte	 00000B5D _DATA	
STR_MSGFIRSTCHAR . . . . . . . .	Byte	 00000B0F _DATA	
STR_MSGINTSIGN . . . . . . . . .	Byte	 00000B49 _DATA	
STR_MSGLENGTH  . . . . . . . . .	Byte	 00000B54 _DATA	
STR_MSGPASSEDSTRING  . . . . . .	Byte	 00000AFF _DATA	
STR_MSGPOINTER . . . . . . . . .	Byte	 00000AEF _DATA	
STR_MSGSHIFTEDSTRING . . . . . .	Byte	 00000B38 _DATA	
STR_MSGSHIFTING  . . . . . . . .	Byte	 00000B25 _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEMPS_PER_DAY  . . . . . . . . .	Number	 00000018h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arr_TempMatrix . . . . . . . . .	DWord	 0000063F _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00000000 _DATA	
file_TempReadings  . . . . . . .	Byte	 000000A4 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
int_BufferSizeFileName . . . . .	DWord	 0000048C _DATA	
int_BufferSizeTemperatureFile  .	DWord	 00000494 _DATA	
int_LenNameOfFile  . . . . . . .	DWord	 00000490 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
str_MsgAddressOfMatrix . . . . .	Byte	 0000060A _DATA	
str_MsgAfterSignCheck  . . . . .	Byte	 000005E1 _DATA	
str_MsgByteOffset  . . . . . . .	Byte	 00000BC8 _DATA	
str_MsgColIndex  . . . . . . . .	Byte	 00000B9F _DATA	
str_MsgConvertedInt  . . . . . .	Byte	 000005C3 _DATA	
str_MsgCrntDlmtrPos  . . . . . .	Byte	 000004E7 _DATA	
str_MsgCurrentTempIteration  . .	Byte	 0000051A _DATA	
str_MsgCurrentTemp . . . . . . .	Byte	 00000B84 _DATA	
str_MsgDestAddress . . . . . . .	Byte	 00000BD6 _DATA	
str_MsgElementIndex  . . . . . .	Byte	 00000BB8 _DATA	
str_MsgLoadedFile  . . . . . . .	Byte	 00000508 _DATA	
str_MsgMatrixPtr . . . . . . . .	Byte	 00000BAB _DATA	
str_MsgNumberofColumns . . . . .	Byte	 000004AD _DATA	
str_MsgNumberofRows  . . . . . .	Byte	 00000498 _DATA	
str_MsgPrevDlmtrPos  . . . . . .	Byte	 000004C5 _DATA	
str_MsgPromptFileName  . . . . .	Byte	 00000004 _DATA	
str_MsgRowIndex  . . . . . . . .	Byte	 00000B93 _DATA	
str_MsgSavedInteger  . . . . . .	Byte	 00000BEC _DATA	
str_MsgSignRemoved . . . . . . .	Byte	 00000582 _DATA	
str_MsgSign  . . . . . . . . . .	Byte	 00000546 _DATA	
str_NameOfFile . . . . . . . . .	Byte	 00000040 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   2 Warnings
	   0 Errors
